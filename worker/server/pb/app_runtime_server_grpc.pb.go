// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: app_runtime_server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppRuntimeSync_GetServiceStatuses_FullMethodName      = "/AppRuntimeSync/GetServiceStatuses"
	AppRuntimeSync_GetAppStatus_FullMethodName            = "/AppRuntimeSync/GetAppStatus"
	AppRuntimeSync_GetAppPods_FullMethodName              = "/AppRuntimeSync/GetAppPods"
	AppRuntimeSync_GetMultiAppPods_FullMethodName         = "/AppRuntimeSync/GetMultiAppPods"
	AppRuntimeSync_GetComponentPodNums_FullMethodName     = "/AppRuntimeSync/GetComponentPodNums"
	AppRuntimeSync_GetDeployInfo_FullMethodName           = "/AppRuntimeSync/GetDeployInfo"
	AppRuntimeSync_GetTenantEnvResource_FullMethodName    = "/AppRuntimeSync/GetTenantEnvResource"
	AppRuntimeSync_GetTenantEnvResources_FullMethodName   = "/AppRuntimeSync/GetTenantEnvResources"
	AppRuntimeSync_ListThirdPartyEndpoints_FullMethodName = "/AppRuntimeSync/ListThirdPartyEndpoints"
	AppRuntimeSync_AddThirdPartyEndpoint_FullMethodName   = "/AppRuntimeSync/AddThirdPartyEndpoint"
	AppRuntimeSync_UpdThirdPartyEndpoint_FullMethodName   = "/AppRuntimeSync/UpdThirdPartyEndpoint"
	AppRuntimeSync_DelThirdPartyEndpoint_FullMethodName   = "/AppRuntimeSync/DelThirdPartyEndpoint"
	AppRuntimeSync_GetPodDetail_FullMethodName            = "/AppRuntimeSync/GetPodDetail"
	AppRuntimeSync_GetStorageClasses_FullMethodName       = "/AppRuntimeSync/GetStorageClasses"
	AppRuntimeSync_GetAppVolumeStatus_FullMethodName      = "/AppRuntimeSync/GetAppVolumeStatus"
	AppRuntimeSync_ListAppServices_FullMethodName         = "/AppRuntimeSync/ListAppServices"
	AppRuntimeSync_ListHelmAppRelease_FullMethodName      = "/AppRuntimeSync/ListHelmAppRelease"
	AppRuntimeSync_ListAppStatuses_FullMethodName         = "/AppRuntimeSync/ListAppStatuses"
)

// AppRuntimeSyncClient is the client API for AppRuntimeSync service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppRuntimeSyncClient interface {
	GetServiceStatuses(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*StatusMessage, error)
	GetAppStatus(ctx context.Context, in *AppStatusReq, opts ...grpc.CallOption) (*AppStatus, error)
	GetAppPods(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceAppPodList, error)
	GetMultiAppPods(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*MultiServiceAppPodList, error)
	GetComponentPodNums(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ComponentPodNums, error)
	GetDeployInfo(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DeployInfo, error)
	GetTenantEnvResource(ctx context.Context, in *TenantEnvRequest, opts ...grpc.CallOption) (*TenantEnvResource, error)
	GetTenantEnvResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantEnvResourceList, error)
	ListThirdPartyEndpoints(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ThirdPartyEndpoints, error)
	AddThirdPartyEndpoint(ctx context.Context, in *AddThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error)
	UpdThirdPartyEndpoint(ctx context.Context, in *UpdThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error)
	DelThirdPartyEndpoint(ctx context.Context, in *DelThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error)
	GetPodDetail(ctx context.Context, in *GetPodDetailReq, opts ...grpc.CallOption) (*PodDetail, error)
	GetStorageClasses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageClasses, error)
	GetAppVolumeStatus(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceVolumeStatusMessage, error)
	ListAppServices(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppServices, error)
	ListHelmAppRelease(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*HelmAppReleases, error)
	ListAppStatuses(ctx context.Context, in *AppStatusesReq, opts ...grpc.CallOption) (*AppStatuses, error)
}

type appRuntimeSyncClient struct {
	cc grpc.ClientConnInterface
}

func NewAppRuntimeSyncClient(cc grpc.ClientConnInterface) AppRuntimeSyncClient {
	return &appRuntimeSyncClient{cc}
}

func (c *appRuntimeSyncClient) GetServiceStatuses(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*StatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusMessage)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetServiceStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetAppStatus(ctx context.Context, in *AppStatusReq, opts ...grpc.CallOption) (*AppStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppStatus)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetAppStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetAppPods(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceAppPodList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceAppPodList)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetAppPods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetMultiAppPods(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*MultiServiceAppPodList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MultiServiceAppPodList)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetMultiAppPods_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetComponentPodNums(ctx context.Context, in *ServicesRequest, opts ...grpc.CallOption) (*ComponentPodNums, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ComponentPodNums)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetComponentPodNums_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetDeployInfo(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*DeployInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeployInfo)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetDeployInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetTenantEnvResource(ctx context.Context, in *TenantEnvRequest, opts ...grpc.CallOption) (*TenantEnvResource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantEnvResource)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetTenantEnvResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetTenantEnvResources(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TenantEnvResourceList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenantEnvResourceList)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetTenantEnvResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) ListThirdPartyEndpoints(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ThirdPartyEndpoints, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ThirdPartyEndpoints)
	err := c.cc.Invoke(ctx, AppRuntimeSync_ListThirdPartyEndpoints_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) AddThirdPartyEndpoint(ctx context.Context, in *AddThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppRuntimeSync_AddThirdPartyEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) UpdThirdPartyEndpoint(ctx context.Context, in *UpdThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppRuntimeSync_UpdThirdPartyEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) DelThirdPartyEndpoint(ctx context.Context, in *DelThirdPartyEndpointsReq, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AppRuntimeSync_DelThirdPartyEndpoint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetPodDetail(ctx context.Context, in *GetPodDetailReq, opts ...grpc.CallOption) (*PodDetail, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PodDetail)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetPodDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetStorageClasses(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StorageClasses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StorageClasses)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetStorageClasses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) GetAppVolumeStatus(ctx context.Context, in *ServiceRequest, opts ...grpc.CallOption) (*ServiceVolumeStatusMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceVolumeStatusMessage)
	err := c.cc.Invoke(ctx, AppRuntimeSync_GetAppVolumeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) ListAppServices(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*AppServices, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppServices)
	err := c.cc.Invoke(ctx, AppRuntimeSync_ListAppServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) ListHelmAppRelease(ctx context.Context, in *AppReq, opts ...grpc.CallOption) (*HelmAppReleases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelmAppReleases)
	err := c.cc.Invoke(ctx, AppRuntimeSync_ListHelmAppRelease_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRuntimeSyncClient) ListAppStatuses(ctx context.Context, in *AppStatusesReq, opts ...grpc.CallOption) (*AppStatuses, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppStatuses)
	err := c.cc.Invoke(ctx, AppRuntimeSync_ListAppStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppRuntimeSyncServer is the server API for AppRuntimeSync service.
// All implementations must embed UnimplementedAppRuntimeSyncServer
// for forward compatibility.
type AppRuntimeSyncServer interface {
	GetServiceStatuses(context.Context, *ServicesRequest) (*StatusMessage, error)
	GetAppStatus(context.Context, *AppStatusReq) (*AppStatus, error)
	GetAppPods(context.Context, *ServiceRequest) (*ServiceAppPodList, error)
	GetMultiAppPods(context.Context, *ServicesRequest) (*MultiServiceAppPodList, error)
	GetComponentPodNums(context.Context, *ServicesRequest) (*ComponentPodNums, error)
	GetDeployInfo(context.Context, *ServiceRequest) (*DeployInfo, error)
	GetTenantEnvResource(context.Context, *TenantEnvRequest) (*TenantEnvResource, error)
	GetTenantEnvResources(context.Context, *Empty) (*TenantEnvResourceList, error)
	ListThirdPartyEndpoints(context.Context, *ServiceRequest) (*ThirdPartyEndpoints, error)
	AddThirdPartyEndpoint(context.Context, *AddThirdPartyEndpointsReq) (*Empty, error)
	UpdThirdPartyEndpoint(context.Context, *UpdThirdPartyEndpointsReq) (*Empty, error)
	DelThirdPartyEndpoint(context.Context, *DelThirdPartyEndpointsReq) (*Empty, error)
	GetPodDetail(context.Context, *GetPodDetailReq) (*PodDetail, error)
	GetStorageClasses(context.Context, *Empty) (*StorageClasses, error)
	GetAppVolumeStatus(context.Context, *ServiceRequest) (*ServiceVolumeStatusMessage, error)
	ListAppServices(context.Context, *AppReq) (*AppServices, error)
	ListHelmAppRelease(context.Context, *AppReq) (*HelmAppReleases, error)
	ListAppStatuses(context.Context, *AppStatusesReq) (*AppStatuses, error)
	mustEmbedUnimplementedAppRuntimeSyncServer()
}

// UnimplementedAppRuntimeSyncServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppRuntimeSyncServer struct{}

func (UnimplementedAppRuntimeSyncServer) GetServiceStatuses(context.Context, *ServicesRequest) (*StatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatuses not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetAppStatus(context.Context, *AppStatusReq) (*AppStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppStatus not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetAppPods(context.Context, *ServiceRequest) (*ServiceAppPodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPods not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetMultiAppPods(context.Context, *ServicesRequest) (*MultiServiceAppPodList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiAppPods not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetComponentPodNums(context.Context, *ServicesRequest) (*ComponentPodNums, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentPodNums not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetDeployInfo(context.Context, *ServiceRequest) (*DeployInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployInfo not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetTenantEnvResource(context.Context, *TenantEnvRequest) (*TenantEnvResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantEnvResource not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetTenantEnvResources(context.Context, *Empty) (*TenantEnvResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantEnvResources not implemented")
}
func (UnimplementedAppRuntimeSyncServer) ListThirdPartyEndpoints(context.Context, *ServiceRequest) (*ThirdPartyEndpoints, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThirdPartyEndpoints not implemented")
}
func (UnimplementedAppRuntimeSyncServer) AddThirdPartyEndpoint(context.Context, *AddThirdPartyEndpointsReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddThirdPartyEndpoint not implemented")
}
func (UnimplementedAppRuntimeSyncServer) UpdThirdPartyEndpoint(context.Context, *UpdThirdPartyEndpointsReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdThirdPartyEndpoint not implemented")
}
func (UnimplementedAppRuntimeSyncServer) DelThirdPartyEndpoint(context.Context, *DelThirdPartyEndpointsReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelThirdPartyEndpoint not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetPodDetail(context.Context, *GetPodDetailReq) (*PodDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPodDetail not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetStorageClasses(context.Context, *Empty) (*StorageClasses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageClasses not implemented")
}
func (UnimplementedAppRuntimeSyncServer) GetAppVolumeStatus(context.Context, *ServiceRequest) (*ServiceVolumeStatusMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppVolumeStatus not implemented")
}
func (UnimplementedAppRuntimeSyncServer) ListAppServices(context.Context, *AppReq) (*AppServices, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppServices not implemented")
}
func (UnimplementedAppRuntimeSyncServer) ListHelmAppRelease(context.Context, *AppReq) (*HelmAppReleases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHelmAppRelease not implemented")
}
func (UnimplementedAppRuntimeSyncServer) ListAppStatuses(context.Context, *AppStatusesReq) (*AppStatuses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAppStatuses not implemented")
}
func (UnimplementedAppRuntimeSyncServer) mustEmbedUnimplementedAppRuntimeSyncServer() {}
func (UnimplementedAppRuntimeSyncServer) testEmbeddedByValue()                        {}

// UnsafeAppRuntimeSyncServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppRuntimeSyncServer will
// result in compilation errors.
type UnsafeAppRuntimeSyncServer interface {
	mustEmbedUnimplementedAppRuntimeSyncServer()
}

func RegisterAppRuntimeSyncServer(s grpc.ServiceRegistrar, srv AppRuntimeSyncServer) {
	// If the following call pancis, it indicates UnimplementedAppRuntimeSyncServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppRuntimeSync_ServiceDesc, srv)
}

func _AppRuntimeSync_GetServiceStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetServiceStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetServiceStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetServiceStatuses(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetAppStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetAppStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetAppStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetAppStatus(ctx, req.(*AppStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetAppPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetAppPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetAppPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetAppPods(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetMultiAppPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetMultiAppPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetMultiAppPods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetMultiAppPods(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetComponentPodNums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetComponentPodNums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetComponentPodNums_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetComponentPodNums(ctx, req.(*ServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetDeployInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetDeployInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetDeployInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetDeployInfo(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetTenantEnvResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetTenantEnvResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetTenantEnvResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetTenantEnvResource(ctx, req.(*TenantEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetTenantEnvResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetTenantEnvResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetTenantEnvResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetTenantEnvResources(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_ListThirdPartyEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).ListThirdPartyEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_ListThirdPartyEndpoints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).ListThirdPartyEndpoints(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_AddThirdPartyEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddThirdPartyEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).AddThirdPartyEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_AddThirdPartyEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).AddThirdPartyEndpoint(ctx, req.(*AddThirdPartyEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_UpdThirdPartyEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdThirdPartyEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).UpdThirdPartyEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_UpdThirdPartyEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).UpdThirdPartyEndpoint(ctx, req.(*UpdThirdPartyEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_DelThirdPartyEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelThirdPartyEndpointsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).DelThirdPartyEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_DelThirdPartyEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).DelThirdPartyEndpoint(ctx, req.(*DelThirdPartyEndpointsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetPodDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetPodDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetPodDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetPodDetail(ctx, req.(*GetPodDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetStorageClasses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetStorageClasses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetStorageClasses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetStorageClasses(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_GetAppVolumeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).GetAppVolumeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_GetAppVolumeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).GetAppVolumeStatus(ctx, req.(*ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_ListAppServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).ListAppServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_ListAppServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).ListAppServices(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_ListHelmAppRelease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).ListHelmAppRelease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_ListHelmAppRelease_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).ListHelmAppRelease(ctx, req.(*AppReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRuntimeSync_ListAppStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppStatusesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRuntimeSyncServer).ListAppStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppRuntimeSync_ListAppStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRuntimeSyncServer).ListAppStatuses(ctx, req.(*AppStatusesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AppRuntimeSync_ServiceDesc is the grpc.ServiceDesc for AppRuntimeSync service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppRuntimeSync_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AppRuntimeSync",
	HandlerType: (*AppRuntimeSyncServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceStatuses",
			Handler:    _AppRuntimeSync_GetServiceStatuses_Handler,
		},
		{
			MethodName: "GetAppStatus",
			Handler:    _AppRuntimeSync_GetAppStatus_Handler,
		},
		{
			MethodName: "GetAppPods",
			Handler:    _AppRuntimeSync_GetAppPods_Handler,
		},
		{
			MethodName: "GetMultiAppPods",
			Handler:    _AppRuntimeSync_GetMultiAppPods_Handler,
		},
		{
			MethodName: "GetComponentPodNums",
			Handler:    _AppRuntimeSync_GetComponentPodNums_Handler,
		},
		{
			MethodName: "GetDeployInfo",
			Handler:    _AppRuntimeSync_GetDeployInfo_Handler,
		},
		{
			MethodName: "GetTenantEnvResource",
			Handler:    _AppRuntimeSync_GetTenantEnvResource_Handler,
		},
		{
			MethodName: "GetTenantEnvResources",
			Handler:    _AppRuntimeSync_GetTenantEnvResources_Handler,
		},
		{
			MethodName: "ListThirdPartyEndpoints",
			Handler:    _AppRuntimeSync_ListThirdPartyEndpoints_Handler,
		},
		{
			MethodName: "AddThirdPartyEndpoint",
			Handler:    _AppRuntimeSync_AddThirdPartyEndpoint_Handler,
		},
		{
			MethodName: "UpdThirdPartyEndpoint",
			Handler:    _AppRuntimeSync_UpdThirdPartyEndpoint_Handler,
		},
		{
			MethodName: "DelThirdPartyEndpoint",
			Handler:    _AppRuntimeSync_DelThirdPartyEndpoint_Handler,
		},
		{
			MethodName: "GetPodDetail",
			Handler:    _AppRuntimeSync_GetPodDetail_Handler,
		},
		{
			MethodName: "GetStorageClasses",
			Handler:    _AppRuntimeSync_GetStorageClasses_Handler,
		},
		{
			MethodName: "GetAppVolumeStatus",
			Handler:    _AppRuntimeSync_GetAppVolumeStatus_Handler,
		},
		{
			MethodName: "ListAppServices",
			Handler:    _AppRuntimeSync_ListAppServices_Handler,
		},
		{
			MethodName: "ListHelmAppRelease",
			Handler:    _AppRuntimeSync_ListHelmAppRelease_Handler,
		},
		{
			MethodName: "ListAppStatuses",
			Handler:    _AppRuntimeSync_ListAppStatuses_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "app_runtime_server.proto",
}
