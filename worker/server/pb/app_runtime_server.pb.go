// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.3
// source: app_runtime_server.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceVolumeStatus int32

const (
	ServiceVolumeStatus_READY     ServiceVolumeStatus = 0
	ServiceVolumeStatus_NOT_READY ServiceVolumeStatus = 1
)

// Enum value maps for ServiceVolumeStatus.
var (
	ServiceVolumeStatus_name = map[int32]string{
		0: "READY",
		1: "NOT_READY",
	}
	ServiceVolumeStatus_value = map[string]int32{
		"READY":     0,
		"NOT_READY": 1,
	}
)

func (x ServiceVolumeStatus) Enum() *ServiceVolumeStatus {
	p := new(ServiceVolumeStatus)
	*p = x
	return p
}

func (x ServiceVolumeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceVolumeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_app_runtime_server_proto_enumTypes[0].Descriptor()
}

func (ServiceVolumeStatus) Type() protoreflect.EnumType {
	return &file_app_runtime_server_proto_enumTypes[0]
}

func (x ServiceVolumeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceVolumeStatus.Descriptor instead.
func (ServiceVolumeStatus) EnumDescriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{0}
}

type PodStatus_Type int32

const (
	// PENDING means the pod has been accepted by the system, but one or more of the containers
	// has not been started. This includes time before being bound to a node, as well as time spent
	// pulling images onto the host.
	PodStatus_PENDING PodStatus_Type = 0
	// RUNNING means the pod has been bound to a node and all of the containers have been started.
	// At least one container is still running or is in the process of being restarted.
	PodStatus_RUNNING PodStatus_Type = 1
	// SUCCEEDED means that all containers in the pod have voluntarily terminated
	// with a container exit code of 0, and the system is not going to restart any of these containers.
	PodStatus_SUCCEEDED PodStatus_Type = 2
	// FAILED means that all containers in the pod have terminated, and at least one container has
	// terminated in a failure (exited with a non-zero exit code or was stopped by the system).
	PodStatus_FAILED PodStatus_Type = 3
	// UNKNOWN means that for some reason the state of the pod could not be obtained, typically due
	// to an error in communicating with the host of the pod.
	PodStatus_UNKNOWN    PodStatus_Type = 4
	PodStatus_TEMINATING PodStatus_Type = 5
	PodStatus_ABNORMAL   PodStatus_Type = 6
	PodStatus_INITIATING PodStatus_Type = 7
	PodStatus_SCHEDULING PodStatus_Type = 8
	PodStatus_NOTREADY   PodStatus_Type = 9
	PodStatus_UNHEALTHY  PodStatus_Type = 10
)

// Enum value maps for PodStatus_Type.
var (
	PodStatus_Type_name = map[int32]string{
		0:  "PENDING",
		1:  "RUNNING",
		2:  "SUCCEEDED",
		3:  "FAILED",
		4:  "UNKNOWN",
		5:  "TEMINATING",
		6:  "ABNORMAL",
		7:  "INITIATING",
		8:  "SCHEDULING",
		9:  "NOTREADY",
		10: "UNHEALTHY",
	}
	PodStatus_Type_value = map[string]int32{
		"PENDING":    0,
		"RUNNING":    1,
		"SUCCEEDED":  2,
		"FAILED":     3,
		"UNKNOWN":    4,
		"TEMINATING": 5,
		"ABNORMAL":   6,
		"INITIATING": 7,
		"SCHEDULING": 8,
		"NOTREADY":   9,
		"UNHEALTHY":  10,
	}
)

func (x PodStatus_Type) Enum() *PodStatus_Type {
	p := new(PodStatus_Type)
	*p = x
	return p
}

func (x PodStatus_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PodStatus_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_app_runtime_server_proto_enumTypes[1].Descriptor()
}

func (PodStatus_Type) Type() protoreflect.EnumType {
	return &file_app_runtime_server_proto_enumTypes[1]
}

func (x PodStatus_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PodStatus_Type.Descriptor instead.
func (PodStatus_Type) EnumDescriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{24, 0}
}

type AppStatus_Status int32

const (
	AppStatus_NIL      AppStatus_Status = 0
	AppStatus_RUNNING  AppStatus_Status = 1
	AppStatus_CLOSED   AppStatus_Status = 2
	AppStatus_ABNORMAL AppStatus_Status = 3
	AppStatus_STARTING AppStatus_Status = 4
	AppStatus_STOPPING AppStatus_Status = 5
)

// Enum value maps for AppStatus_Status.
var (
	AppStatus_Status_name = map[int32]string{
		0: "NIL",
		1: "RUNNING",
		2: "CLOSED",
		3: "ABNORMAL",
		4: "STARTING",
		5: "STOPPING",
	}
	AppStatus_Status_value = map[string]int32{
		"NIL":      0,
		"RUNNING":  1,
		"CLOSED":   2,
		"ABNORMAL": 3,
		"STARTING": 4,
		"STOPPING": 5,
	}
)

func (x AppStatus_Status) Enum() *AppStatus_Status {
	p := new(AppStatus_Status)
	*p = x
	return p
}

func (x AppStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_app_runtime_server_proto_enumTypes[2].Descriptor()
}

func (AppStatus_Status) Type() protoreflect.EnumType {
	return &file_app_runtime_server_proto_enumTypes[2]
}

func (x AppStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppStatus_Status.Descriptor instead.
func (AppStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{32, 0}
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_app_runtime_server_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{0}
}

type AppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppReq) Reset() {
	*x = AppReq{}
	mi := &file_app_runtime_server_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppReq) ProtoMessage() {}

func (x *AppReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppReq.ProtoReflect.Descriptor instead.
func (*AppReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{1}
}

func (x *AppReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type AppStatusReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
}

func (x *AppStatusReq) Reset() {
	*x = AppStatusReq{}
	mi := &file_app_runtime_server_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStatusReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatusReq) ProtoMessage() {}

func (x *AppStatusReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatusReq.ProtoReflect.Descriptor instead.
func (*AppStatusReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{2}
}

func (x *AppStatusReq) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

type ServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId string `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (x *ServiceRequest) Reset() {
	*x = ServiceRequest{}
	mi := &file_app_runtime_server_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceRequest) ProtoMessage() {}

func (x *ServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceRequest.ProtoReflect.Descriptor instead.
func (*ServiceRequest) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{3}
}

func (x *ServiceRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

type ServicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceIds string `protobuf:"bytes,1,opt,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (x *ServicesRequest) Reset() {
	*x = ServicesRequest{}
	mi := &file_app_runtime_server_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesRequest) ProtoMessage() {}

func (x *ServicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesRequest.ProtoReflect.Descriptor instead.
func (*ServicesRequest) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{4}
}

func (x *ServicesRequest) GetServiceIds() string {
	if x != nil {
		return x.ServiceIds
	}
	return ""
}

type TenantEnvRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantEnvId string `protobuf:"bytes,1,opt,name=tenant_env_id,json=tenantEnvId,proto3" json:"tenant_env_id,omitempty"`
}

func (x *TenantEnvRequest) Reset() {
	*x = TenantEnvRequest{}
	mi := &file_app_runtime_server_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantEnvRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantEnvRequest) ProtoMessage() {}

func (x *TenantEnvRequest) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantEnvRequest.ProtoReflect.Descriptor instead.
func (*TenantEnvRequest) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{5}
}

func (x *TenantEnvRequest) GetTenantEnvId() string {
	if x != nil {
		return x.TenantEnvId
	}
	return ""
}

type StatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]string `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StatusMessage) Reset() {
	*x = StatusMessage{}
	mi := &file_app_runtime_server_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusMessage) ProtoMessage() {}

func (x *StatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusMessage.ProtoReflect.Descriptor instead.
func (*StatusMessage) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{6}
}

func (x *StatusMessage) GetStatus() map[string]string {
	if x != nil {
		return x.Status
	}
	return nil
}

type DiskMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks map[string]float64 `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *DiskMessage) Reset() {
	*x = DiskMessage{}
	mi := &file_app_runtime_server_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskMessage) ProtoMessage() {}

func (x *DiskMessage) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskMessage.ProtoReflect.Descriptor instead.
func (*DiskMessage) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{7}
}

func (x *DiskMessage) GetDisks() map[string]float64 {
	if x != nil {
		return x.Disks
	}
	return nil
}

type ServiceAppPodList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OldPods []*ServiceAppPod `protobuf:"bytes,1,rep,name=oldPods,proto3" json:"oldPods,omitempty"`
	NewPods []*ServiceAppPod `protobuf:"bytes,2,rep,name=newPods,proto3" json:"newPods,omitempty"`
}

func (x *ServiceAppPodList) Reset() {
	*x = ServiceAppPodList{}
	mi := &file_app_runtime_server_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAppPodList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAppPodList) ProtoMessage() {}

func (x *ServiceAppPodList) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAppPodList.ProtoReflect.Descriptor instead.
func (*ServiceAppPodList) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{8}
}

func (x *ServiceAppPodList) GetOldPods() []*ServiceAppPod {
	if x != nil {
		return x.OldPods
	}
	return nil
}

func (x *ServiceAppPodList) GetNewPods() []*ServiceAppPod {
	if x != nil {
		return x.NewPods
	}
	return nil
}

type MultiServiceAppPodList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServicePods map[string]*ServiceAppPodList `protobuf:"bytes,1,rep,name=servicePods,proto3" json:"servicePods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MultiServiceAppPodList) Reset() {
	*x = MultiServiceAppPodList{}
	mi := &file_app_runtime_server_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MultiServiceAppPodList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiServiceAppPodList) ProtoMessage() {}

func (x *MultiServiceAppPodList) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiServiceAppPodList.ProtoReflect.Descriptor instead.
func (*MultiServiceAppPodList) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{9}
}

func (x *MultiServiceAppPodList) GetServicePods() map[string]*ServiceAppPodList {
	if x != nil {
		return x.ServicePods
	}
	return nil
}

type ComponentPodNums struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PodNums map[string]int32 `protobuf:"bytes,1,rep,name=podNums,proto3" json:"podNums,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ComponentPodNums) Reset() {
	*x = ComponentPodNums{}
	mi := &file_app_runtime_server_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComponentPodNums) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComponentPodNums) ProtoMessage() {}

func (x *ComponentPodNums) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComponentPodNums.ProtoReflect.Descriptor instead.
func (*ComponentPodNums) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{10}
}

func (x *ComponentPodNums) GetPodNums() map[string]int32 {
	if x != nil {
		return x.PodNums
	}
	return nil
}

type ServiceAppPod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId  string                `protobuf:"bytes,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	DeployId   string                `protobuf:"bytes,2,opt,name=deploy_id,json=deployId,proto3" json:"deploy_id,omitempty"`
	DeployType string                `protobuf:"bytes,3,opt,name=deploy_type,json=deployType,proto3" json:"deploy_type,omitempty"`
	PodName    string                `protobuf:"bytes,4,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
	PodIp      string                `protobuf:"bytes,5,opt,name=pod_ip,json=podIp,proto3" json:"pod_ip,omitempty"`
	PodStatus  string                `protobuf:"bytes,6,opt,name=pod_status,json=podStatus,proto3" json:"pod_status,omitempty"`
	Containers map[string]*Container `protobuf:"bytes,7,rep,name=containers,proto3" json:"containers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PodVolumes []string              `protobuf:"bytes,8,rep,name=pod_volumes,json=podVolumes,proto3" json:"pod_volumes,omitempty"`
}

func (x *ServiceAppPod) Reset() {
	*x = ServiceAppPod{}
	mi := &file_app_runtime_server_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceAppPod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceAppPod) ProtoMessage() {}

func (x *ServiceAppPod) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceAppPod.ProtoReflect.Descriptor instead.
func (*ServiceAppPod) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{11}
}

func (x *ServiceAppPod) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *ServiceAppPod) GetDeployId() string {
	if x != nil {
		return x.DeployId
	}
	return ""
}

func (x *ServiceAppPod) GetDeployType() string {
	if x != nil {
		return x.DeployType
	}
	return ""
}

func (x *ServiceAppPod) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

func (x *ServiceAppPod) GetPodIp() string {
	if x != nil {
		return x.PodIp
	}
	return ""
}

func (x *ServiceAppPod) GetPodStatus() string {
	if x != nil {
		return x.PodStatus
	}
	return ""
}

func (x *ServiceAppPod) GetContainers() map[string]*Container {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *ServiceAppPod) GetPodVolumes() []string {
	if x != nil {
		return x.PodVolumes
	}
	return nil
}

type Container struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContainerName string `protobuf:"bytes,1,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
	MemoryLimit   int64  `protobuf:"varint,2,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	CpuRequest    int64  `protobuf:"varint,3,opt,name=cpu_request,json=cpuRequest,proto3" json:"cpu_request,omitempty"`
	MemoryRequest int64  `protobuf:"varint,4,opt,name=memory_request,json=memoryRequest,proto3" json:"memory_request,omitempty"`
}

func (x *Container) Reset() {
	*x = Container{}
	mi := &file_app_runtime_server_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Container) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Container) ProtoMessage() {}

func (x *Container) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Container.ProtoReflect.Descriptor instead.
func (*Container) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{12}
}

func (x *Container) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

func (x *Container) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *Container) GetCpuRequest() int64 {
	if x != nil {
		return x.CpuRequest
	}
	return 0
}

func (x *Container) GetMemoryRequest() int64 {
	if x != nil {
		return x.MemoryRequest
	}
	return 0
}

type DeployInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string            `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Statefuleset string            `protobuf:"bytes,2,opt,name=statefuleset,proto3" json:"statefuleset,omitempty"`
	Deployment   string            `protobuf:"bytes,3,opt,name=deployment,proto3" json:"deployment,omitempty"`
	StartTime    string            `protobuf:"bytes,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Pods         map[string]string `protobuf:"bytes,5,rep,name=pods,proto3" json:"pods,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Services     map[string]string `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Endpoints    map[string]string `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Secrets      map[string]string `protobuf:"bytes,8,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Ingresses    map[string]string `protobuf:"bytes,9,rep,name=ingresses,proto3" json:"ingresses,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Replicatset  map[string]string `protobuf:"bytes,10,rep,name=replicatset,proto3" json:"replicatset,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Status       string            `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeployInfo) Reset() {
	*x = DeployInfo{}
	mi := &file_app_runtime_server_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeployInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployInfo) ProtoMessage() {}

func (x *DeployInfo) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployInfo.ProtoReflect.Descriptor instead.
func (*DeployInfo) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{13}
}

func (x *DeployInfo) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeployInfo) GetStatefuleset() string {
	if x != nil {
		return x.Statefuleset
	}
	return ""
}

func (x *DeployInfo) GetDeployment() string {
	if x != nil {
		return x.Deployment
	}
	return ""
}

func (x *DeployInfo) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *DeployInfo) GetPods() map[string]string {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *DeployInfo) GetServices() map[string]string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *DeployInfo) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *DeployInfo) GetSecrets() map[string]string {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *DeployInfo) GetIngresses() map[string]string {
	if x != nil {
		return x.Ingresses
	}
	return nil
}

func (x *DeployInfo) GetReplicatset() map[string]string {
	if x != nil {
		return x.Replicatset
	}
	return nil
}

func (x *DeployInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type TenantEnvResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuRequest            int64 `protobuf:"varint,1,opt,name=cpu_request,json=cpuRequest,proto3" json:"cpu_request,omitempty"`
	CpuLimit              int64 `protobuf:"varint,2,opt,name=cpu_limit,json=cpuLimit,proto3" json:"cpu_limit,omitempty"`
	MemoryRequest         int64 `protobuf:"varint,3,opt,name=memory_request,json=memoryRequest,proto3" json:"memory_request,omitempty"`
	MemoryLimit           int64 `protobuf:"varint,4,opt,name=memory_limit,json=memoryLimit,proto3" json:"memory_limit,omitempty"`
	RunningAppNum         int64 `protobuf:"varint,5,opt,name=running_app_num,json=runningAppNum,proto3" json:"running_app_num,omitempty"`
	RunningAppThirdNum    int64 `protobuf:"varint,10,opt,name=running_app_third_num,json=runningAppThirdNum,proto3" json:"running_app_third_num,omitempty"`
	RunningAppInternalNum int64 `protobuf:"varint,11,opt,name=running_app_internal_num,json=runningAppInternalNum,proto3" json:"running_app_internal_num,omitempty"`
}

func (x *TenantEnvResource) Reset() {
	*x = TenantEnvResource{}
	mi := &file_app_runtime_server_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantEnvResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantEnvResource) ProtoMessage() {}

func (x *TenantEnvResource) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantEnvResource.ProtoReflect.Descriptor instead.
func (*TenantEnvResource) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{14}
}

func (x *TenantEnvResource) GetCpuRequest() int64 {
	if x != nil {
		return x.CpuRequest
	}
	return 0
}

func (x *TenantEnvResource) GetCpuLimit() int64 {
	if x != nil {
		return x.CpuLimit
	}
	return 0
}

func (x *TenantEnvResource) GetMemoryRequest() int64 {
	if x != nil {
		return x.MemoryRequest
	}
	return 0
}

func (x *TenantEnvResource) GetMemoryLimit() int64 {
	if x != nil {
		return x.MemoryLimit
	}
	return 0
}

func (x *TenantEnvResource) GetRunningAppNum() int64 {
	if x != nil {
		return x.RunningAppNum
	}
	return 0
}

func (x *TenantEnvResource) GetRunningAppThirdNum() int64 {
	if x != nil {
		return x.RunningAppThirdNum
	}
	return 0
}

func (x *TenantEnvResource) GetRunningAppInternalNum() int64 {
	if x != nil {
		return x.RunningAppInternalNum
	}
	return 0
}

type TenantEnvResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resources map[string]*TenantEnvResource `protobuf:"bytes,1,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TenantEnvResourceList) Reset() {
	*x = TenantEnvResourceList{}
	mi := &file_app_runtime_server_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TenantEnvResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantEnvResourceList) ProtoMessage() {}

func (x *TenantEnvResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantEnvResourceList.ProtoReflect.Descriptor instead.
func (*TenantEnvResourceList) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{15}
}

func (x *TenantEnvResourceList) GetResources() map[string]*TenantEnvResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

type AddThirdPartyEndpointsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sid      string `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	IsOnline bool   `protobuf:"varint,5,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
}

func (x *AddThirdPartyEndpointsReq) Reset() {
	*x = AddThirdPartyEndpointsReq{}
	mi := &file_app_runtime_server_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddThirdPartyEndpointsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddThirdPartyEndpointsReq) ProtoMessage() {}

func (x *AddThirdPartyEndpointsReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddThirdPartyEndpointsReq.ProtoReflect.Descriptor instead.
func (*AddThirdPartyEndpointsReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{16}
}

func (x *AddThirdPartyEndpointsReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *AddThirdPartyEndpointsReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *AddThirdPartyEndpointsReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddThirdPartyEndpointsReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AddThirdPartyEndpointsReq) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

type UpdThirdPartyEndpointsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid     string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sid      string `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	IsOnline bool   `protobuf:"varint,5,opt,name=is_online,json=isOnline,proto3" json:"is_online,omitempty"`
}

func (x *UpdThirdPartyEndpointsReq) Reset() {
	*x = UpdThirdPartyEndpointsReq{}
	mi := &file_app_runtime_server_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdThirdPartyEndpointsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdThirdPartyEndpointsReq) ProtoMessage() {}

func (x *UpdThirdPartyEndpointsReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdThirdPartyEndpointsReq.ProtoReflect.Descriptor instead.
func (*UpdThirdPartyEndpointsReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{17}
}

func (x *UpdThirdPartyEndpointsReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdThirdPartyEndpointsReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *UpdThirdPartyEndpointsReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UpdThirdPartyEndpointsReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *UpdThirdPartyEndpointsReq) GetIsOnline() bool {
	if x != nil {
		return x.IsOnline
	}
	return false
}

type DelThirdPartyEndpointsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Sid  string `protobuf:"bytes,2,opt,name=sid,proto3" json:"sid,omitempty"`
	Ip   string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DelThirdPartyEndpointsReq) Reset() {
	*x = DelThirdPartyEndpointsReq{}
	mi := &file_app_runtime_server_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DelThirdPartyEndpointsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelThirdPartyEndpointsReq) ProtoMessage() {}

func (x *DelThirdPartyEndpointsReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelThirdPartyEndpointsReq.ProtoReflect.Descriptor instead.
func (*DelThirdPartyEndpointsReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{18}
}

func (x *DelThirdPartyEndpointsReq) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DelThirdPartyEndpointsReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *DelThirdPartyEndpointsReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DelThirdPartyEndpointsReq) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type ThirdPartyEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ComponentID string `protobuf:"bytes,2,opt,name=componentID,proto3" json:"componentID,omitempty"`
	Address     string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Status      string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ThirdPartyEndpoint) Reset() {
	*x = ThirdPartyEndpoint{}
	mi := &file_app_runtime_server_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyEndpoint) ProtoMessage() {}

func (x *ThirdPartyEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyEndpoint.ProtoReflect.Descriptor instead.
func (*ThirdPartyEndpoint) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{19}
}

func (x *ThirdPartyEndpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ThirdPartyEndpoint) GetComponentID() string {
	if x != nil {
		return x.ComponentID
	}
	return ""
}

func (x *ThirdPartyEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ThirdPartyEndpoint) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type ThirdPartyEndpoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ThirdPartyEndpoint `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ThirdPartyEndpoints) Reset() {
	*x = ThirdPartyEndpoints{}
	mi := &file_app_runtime_server_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ThirdPartyEndpoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThirdPartyEndpoints) ProtoMessage() {}

func (x *ThirdPartyEndpoints) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThirdPartyEndpoints.ProtoReflect.Descriptor instead.
func (*ThirdPartyEndpoints) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{20}
}

func (x *ThirdPartyEndpoints) GetItems() []*ThirdPartyEndpoint {
	if x != nil {
		return x.Items
	}
	return nil
}

type ListPodsBySIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
}

func (x *ListPodsBySIDReq) Reset() {
	*x = ListPodsBySIDReq{}
	mi := &file_app_runtime_server_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPodsBySIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPodsBySIDReq) ProtoMessage() {}

func (x *ListPodsBySIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPodsBySIDReq.ProtoReflect.Descriptor instead.
func (*ListPodsBySIDReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{21}
}

func (x *ListPodsBySIDReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

type GetPodDetailReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid     string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	PodName string `protobuf:"bytes,2,opt,name=pod_name,json=podName,proto3" json:"pod_name,omitempty"`
}

func (x *GetPodDetailReq) Reset() {
	*x = GetPodDetailReq{}
	mi := &file_app_runtime_server_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPodDetailReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPodDetailReq) ProtoMessage() {}

func (x *GetPodDetailReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPodDetailReq.ProtoReflect.Descriptor instead.
func (*GetPodDetailReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{22}
}

func (x *GetPodDetailReq) GetSid() string {
	if x != nil {
		return x.Sid
	}
	return ""
}

func (x *GetPodDetailReq) GetPodName() string {
	if x != nil {
		return x.PodName
	}
	return ""
}

type PodEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Reason  string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Age     string `protobuf:"bytes,3,opt,name=age,proto3" json:"age,omitempty"`
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PodEvent) Reset() {
	*x = PodEvent{}
	mi := &file_app_runtime_server_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodEvent) ProtoMessage() {}

func (x *PodEvent) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodEvent.ProtoReflect.Descriptor instead.
func (*PodEvent) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{23}
}

func (x *PodEvent) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PodEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PodEvent) GetAge() string {
	if x != nil {
		return x.Age
	}
	return ""
}

func (x *PodEvent) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PodStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    PodStatus_Type `protobuf:"varint,1,opt,name=type,proto3,enum=PodStatus_Type" json:"type,omitempty"`
	Reason  string         `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string         `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Advice  string         `protobuf:"bytes,4,opt,name=advice,proto3" json:"advice,omitempty"`
	TypeStr string         `protobuf:"bytes,5,opt,name=type_str,json=typeStr,proto3" json:"type_str,omitempty"`
}

func (x *PodStatus) Reset() {
	*x = PodStatus{}
	mi := &file_app_runtime_server_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodStatus) ProtoMessage() {}

func (x *PodStatus) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodStatus.ProtoReflect.Descriptor instead.
func (*PodStatus) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{24}
}

func (x *PodStatus) GetType() PodStatus_Type {
	if x != nil {
		return x.Type
	}
	return PodStatus_PENDING
}

func (x *PodStatus) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PodStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PodStatus) GetAdvice() string {
	if x != nil {
		return x.Advice
	}
	return ""
}

func (x *PodStatus) GetTypeStr() string {
	if x != nil {
		return x.TypeStr
	}
	return ""
}

type PodContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image         string `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	State         string `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Reason        string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Started       string `protobuf:"bytes,4,opt,name=started,proto3" json:"started,omitempty"`
	LimitMemory   string `protobuf:"bytes,5,opt,name=limit_memory,json=limitMemory,proto3" json:"limit_memory,omitempty"`
	LimitCpu      string `protobuf:"bytes,6,opt,name=limit_cpu,json=limitCpu,proto3" json:"limit_cpu,omitempty"`
	RequestMemory string `protobuf:"bytes,7,opt,name=request_memory,json=requestMemory,proto3" json:"request_memory,omitempty"`
	RequestCpu    string `protobuf:"bytes,8,opt,name=request_cpu,json=requestCpu,proto3" json:"request_cpu,omitempty"`
}

func (x *PodContainer) Reset() {
	*x = PodContainer{}
	mi := &file_app_runtime_server_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodContainer) ProtoMessage() {}

func (x *PodContainer) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodContainer.ProtoReflect.Descriptor instead.
func (*PodContainer) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{25}
}

func (x *PodContainer) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PodContainer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *PodContainer) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *PodContainer) GetStarted() string {
	if x != nil {
		return x.Started
	}
	return ""
}

func (x *PodContainer) GetLimitMemory() string {
	if x != nil {
		return x.LimitMemory
	}
	return ""
}

func (x *PodContainer) GetLimitCpu() string {
	if x != nil {
		return x.LimitCpu
	}
	return ""
}

func (x *PodContainer) GetRequestMemory() string {
	if x != nil {
		return x.RequestMemory
	}
	return ""
}

func (x *PodContainer) GetRequestCpu() string {
	if x != nil {
		return x.RequestCpu
	}
	return ""
}

type PodDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Node           string          `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	StartTime      string          `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Status         *PodStatus      `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	Ip             string          `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	NodeIp         string          `protobuf:"bytes,6,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	Version        string          `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	InitContainers []*PodContainer `protobuf:"bytes,8,rep,name=init_containers,json=initContainers,proto3" json:"init_containers,omitempty"`
	Containers     []*PodContainer `protobuf:"bytes,9,rep,name=containers,proto3" json:"containers,omitempty"`
	Events         []*PodEvent     `protobuf:"bytes,10,rep,name=events,proto3" json:"events,omitempty"`
	Namespace      string          `protobuf:"bytes,11,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *PodDetail) Reset() {
	*x = PodDetail{}
	mi := &file_app_runtime_server_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PodDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodDetail) ProtoMessage() {}

func (x *PodDetail) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodDetail.ProtoReflect.Descriptor instead.
func (*PodDetail) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{26}
}

func (x *PodDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodDetail) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *PodDetail) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *PodDetail) GetStatus() *PodStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *PodDetail) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PodDetail) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *PodDetail) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PodDetail) GetInitContainers() []*PodContainer {
	if x != nil {
		return x.InitContainers
	}
	return nil
}

func (x *PodDetail) GetContainers() []*PodContainer {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *PodDetail) GetEvents() []*PodEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *PodDetail) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

type StorageClasses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StorageClassDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StorageClasses) Reset() {
	*x = StorageClasses{}
	mi := &file_app_runtime_server_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageClasses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClasses) ProtoMessage() {}

func (x *StorageClasses) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClasses.ProtoReflect.Descriptor instead.
func (*StorageClasses) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{27}
}

func (x *StorageClasses) GetList() []*StorageClassDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type StorageClassDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Provisioner          string                  `protobuf:"bytes,2,opt,name=provisioner,proto3" json:"provisioner,omitempty"`
	Parameters           map[string]string       `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ReclaimPolicy        string                  `protobuf:"bytes,4,opt,name=reclaim_policy,json=reclaimPolicy,proto3" json:"reclaim_policy,omitempty"`
	AllowVolumeExpansion bool                    `protobuf:"varint,5,opt,name=allow_volume_expansion,json=allowVolumeExpansion,proto3" json:"allow_volume_expansion,omitempty"`
	VolumeBindingMode    string                  `protobuf:"bytes,6,opt,name=volume_binding_mode,json=volumeBindingMode,proto3" json:"volume_binding_mode,omitempty"`
	AllowedTopologies    []*TopologySelectorTerm `protobuf:"bytes,7,rep,name=allowed_topologies,json=allowedTopologies,proto3" json:"allowed_topologies,omitempty"`
}

func (x *StorageClassDetail) Reset() {
	*x = StorageClassDetail{}
	mi := &file_app_runtime_server_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageClassDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageClassDetail) ProtoMessage() {}

func (x *StorageClassDetail) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageClassDetail.ProtoReflect.Descriptor instead.
func (*StorageClassDetail) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{28}
}

func (x *StorageClassDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StorageClassDetail) GetProvisioner() string {
	if x != nil {
		return x.Provisioner
	}
	return ""
}

func (x *StorageClassDetail) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *StorageClassDetail) GetReclaimPolicy() string {
	if x != nil {
		return x.ReclaimPolicy
	}
	return ""
}

func (x *StorageClassDetail) GetAllowVolumeExpansion() bool {
	if x != nil {
		return x.AllowVolumeExpansion
	}
	return false
}

func (x *StorageClassDetail) GetVolumeBindingMode() string {
	if x != nil {
		return x.VolumeBindingMode
	}
	return ""
}

func (x *StorageClassDetail) GetAllowedTopologies() []*TopologySelectorTerm {
	if x != nil {
		return x.AllowedTopologies
	}
	return nil
}

type TopologySelectorTerm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MatchLabelExpressions []*TopologySelectorLabelRequirement `protobuf:"bytes,1,rep,name=match_label_expressions,json=matchLabelExpressions,proto3" json:"match_label_expressions,omitempty"`
}

func (x *TopologySelectorTerm) Reset() {
	*x = TopologySelectorTerm{}
	mi := &file_app_runtime_server_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologySelectorTerm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologySelectorTerm) ProtoMessage() {}

func (x *TopologySelectorTerm) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologySelectorTerm.ProtoReflect.Descriptor instead.
func (*TopologySelectorTerm) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{29}
}

func (x *TopologySelectorTerm) GetMatchLabelExpressions() []*TopologySelectorLabelRequirement {
	if x != nil {
		return x.MatchLabelExpressions
	}
	return nil
}

type TopologySelectorLabelRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Values []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TopologySelectorLabelRequirement) Reset() {
	*x = TopologySelectorLabelRequirement{}
	mi := &file_app_runtime_server_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopologySelectorLabelRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologySelectorLabelRequirement) ProtoMessage() {}

func (x *TopologySelectorLabelRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologySelectorLabelRequirement.ProtoReflect.Descriptor instead.
func (*TopologySelectorLabelRequirement) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{30}
}

func (x *TopologySelectorLabelRequirement) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TopologySelectorLabelRequirement) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type ServiceVolumeStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status map[string]ServiceVolumeStatus `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ServiceVolumeStatus"`
}

func (x *ServiceVolumeStatusMessage) Reset() {
	*x = ServiceVolumeStatusMessage{}
	mi := &file_app_runtime_server_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceVolumeStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceVolumeStatusMessage) ProtoMessage() {}

func (x *ServiceVolumeStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceVolumeStatusMessage.ProtoReflect.Descriptor instead.
func (*ServiceVolumeStatusMessage) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{31}
}

func (x *ServiceVolumeStatusMessage) GetStatus() map[string]ServiceVolumeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type AppStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status     string                `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Cpu        int64                 `protobuf:"varint,2,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory     int64                 `protobuf:"varint,3,opt,name=memory,proto3" json:"memory,omitempty"`
	SetCPU     bool                  `protobuf:"varint,4,opt,name=setCPU,proto3" json:"setCPU,omitempty"`
	SetMemory  bool                  `protobuf:"varint,5,opt,name=setMemory,proto3" json:"setMemory,omitempty"`
	Phase      string                `protobuf:"bytes,6,opt,name=phase,proto3" json:"phase,omitempty"`
	Overrides  []string              `protobuf:"bytes,7,rep,name=overrides,proto3" json:"overrides,omitempty"`
	Version    string                `protobuf:"bytes,8,opt,name=version,proto3" json:"version,omitempty"`
	Conditions []*AppStatusCondition `protobuf:"bytes,9,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Gpu        int64                 `protobuf:"varint,10,opt,name=gpu,proto3" json:"gpu,omitempty"`
	AppId      string                `protobuf:"bytes,11,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppName    string                `protobuf:"bytes,12,opt,name=app_name,json=appName,proto3" json:"app_name,omitempty"`
}

func (x *AppStatus) Reset() {
	*x = AppStatus{}
	mi := &file_app_runtime_server_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatus) ProtoMessage() {}

func (x *AppStatus) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatus.ProtoReflect.Descriptor instead.
func (*AppStatus) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{32}
}

func (x *AppStatus) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AppStatus) GetCpu() int64 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *AppStatus) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *AppStatus) GetSetCPU() bool {
	if x != nil {
		return x.SetCPU
	}
	return false
}

func (x *AppStatus) GetSetMemory() bool {
	if x != nil {
		return x.SetMemory
	}
	return false
}

func (x *AppStatus) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *AppStatus) GetOverrides() []string {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *AppStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AppStatus) GetConditions() []*AppStatusCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *AppStatus) GetGpu() int64 {
	if x != nil {
		return x.Gpu
	}
	return 0
}

func (x *AppStatus) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppStatus) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

type AppStatusCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Status  bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Reason  string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AppStatusCondition) Reset() {
	*x = AppStatusCondition{}
	mi := &file_app_runtime_server_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStatusCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatusCondition) ProtoMessage() {}

func (x *AppStatusCondition) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatusCondition.ProtoReflect.Descriptor instead.
func (*AppStatusCondition) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{33}
}

func (x *AppStatusCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AppStatusCondition) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *AppStatusCondition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *AppStatusCondition) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AppService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string             `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Ports   []*AppService_Port `protobuf:"bytes,3,rep,name=ports,proto3" json:"ports,omitempty"`
	Pods    []*AppService_Pod  `protobuf:"bytes,4,rep,name=pods,proto3" json:"pods,omitempty"`
	OldPods []*AppService_Pod  `protobuf:"bytes,5,rep,name=oldPods,proto3" json:"oldPods,omitempty"`
}

func (x *AppService) Reset() {
	*x = AppService{}
	mi := &file_app_runtime_server_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppService) ProtoMessage() {}

func (x *AppService) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppService.ProtoReflect.Descriptor instead.
func (*AppService) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{34}
}

func (x *AppService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppService) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AppService) GetPorts() []*AppService_Port {
	if x != nil {
		return x.Ports
	}
	return nil
}

func (x *AppService) GetPods() []*AppService_Pod {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *AppService) GetOldPods() []*AppService_Pod {
	if x != nil {
		return x.OldPods
	}
	return nil
}

type AppServices struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Services []*AppService `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *AppServices) Reset() {
	*x = AppServices{}
	mi := &file_app_runtime_server_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppServices) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppServices) ProtoMessage() {}

func (x *AppServices) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppServices.ProtoReflect.Descriptor instead.
func (*AppServices) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{35}
}

func (x *AppServices) GetServices() []*AppService {
	if x != nil {
		return x.Services
	}
	return nil
}

type HelmAppReleases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HelmAppRelease []*HelmAppRelease `protobuf:"bytes,1,rep,name=helmAppRelease,proto3" json:"helmAppRelease,omitempty"`
}

func (x *HelmAppReleases) Reset() {
	*x = HelmAppReleases{}
	mi := &file_app_runtime_server_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelmAppReleases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmAppReleases) ProtoMessage() {}

func (x *HelmAppReleases) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmAppReleases.ProtoReflect.Descriptor instead.
func (*HelmAppReleases) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{36}
}

func (x *HelmAppReleases) GetHelmAppRelease() []*HelmAppRelease {
	if x != nil {
		return x.HelmAppRelease
	}
	return nil
}

type HelmAppRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision    int32  `protobuf:"varint,1,opt,name=revision,proto3" json:"revision,omitempty"`
	Updated     string `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
	Status      string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	Chart       string `protobuf:"bytes,4,opt,name=chart,proto3" json:"chart,omitempty"`
	AppVersion  string `protobuf:"bytes,5,opt,name=appVersion,proto3" json:"appVersion,omitempty"`
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *HelmAppRelease) Reset() {
	*x = HelmAppRelease{}
	mi := &file_app_runtime_server_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HelmAppRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelmAppRelease) ProtoMessage() {}

func (x *HelmAppRelease) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelmAppRelease.ProtoReflect.Descriptor instead.
func (*HelmAppRelease) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{37}
}

func (x *HelmAppRelease) GetRevision() int32 {
	if x != nil {
		return x.Revision
	}
	return 0
}

func (x *HelmAppRelease) GetUpdated() string {
	if x != nil {
		return x.Updated
	}
	return ""
}

func (x *HelmAppRelease) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *HelmAppRelease) GetChart() string {
	if x != nil {
		return x.Chart
	}
	return ""
}

func (x *HelmAppRelease) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *HelmAppRelease) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type AppStatusesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppIds []string `protobuf:"bytes,1,rep,name=app_ids,json=appIds,proto3" json:"app_ids,omitempty"`
}

func (x *AppStatusesReq) Reset() {
	*x = AppStatusesReq{}
	mi := &file_app_runtime_server_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStatusesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatusesReq) ProtoMessage() {}

func (x *AppStatusesReq) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatusesReq.ProtoReflect.Descriptor instead.
func (*AppStatusesReq) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{38}
}

func (x *AppStatusesReq) GetAppIds() []string {
	if x != nil {
		return x.AppIds
	}
	return nil
}

type AppStatuses struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppStatuses []*AppStatus `protobuf:"bytes,1,rep,name=app_statuses,json=appStatuses,proto3" json:"app_statuses,omitempty"`
}

func (x *AppStatuses) Reset() {
	*x = AppStatuses{}
	mi := &file_app_runtime_server_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppStatuses) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppStatuses) ProtoMessage() {}

func (x *AppStatuses) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppStatuses.ProtoReflect.Descriptor instead.
func (*AppStatuses) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{39}
}

func (x *AppStatuses) GetAppStatuses() []*AppStatus {
	if x != nil {
		return x.AppStatuses
	}
	return nil
}

type AppService_Pod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *AppService_Pod) Reset() {
	*x = AppService_Pod{}
	mi := &file_app_runtime_server_proto_msgTypes[54]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppService_Pod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppService_Pod) ProtoMessage() {}

func (x *AppService_Pod) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[54]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppService_Pod.ProtoReflect.Descriptor instead.
func (*AppService_Pod) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{34, 0}
}

func (x *AppService_Pod) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppService_Pod) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AppService_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     int32  `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
}

func (x *AppService_Port) Reset() {
	*x = AppService_Port{}
	mi := &file_app_runtime_server_proto_msgTypes[55]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppService_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppService_Port) ProtoMessage() {}

func (x *AppService_Port) ProtoReflect() protoreflect.Message {
	mi := &file_app_runtime_server_proto_msgTypes[55]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppService_Port.ProtoReflect.Descriptor instead.
func (*AppService_Port) Descriptor() ([]byte, []int) {
	return file_app_runtime_server_proto_rawDescGZIP(), []int{34, 1}
}

func (x *AppService_Port) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *AppService_Port) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

var File_app_runtime_server_proto protoreflect.FileDescriptor

var file_app_runtime_server_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x70, 0x70, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1f, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x70, 0x70, 0x49, 0x64, 0x22, 0x25, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x36, 0x0a, 0x10, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x65,
	0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x6b,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x67, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64,
	0x52, 0x07, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x64, 0x73, 0x22, 0xb8, 0x01, 0x0a, 0x16, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73,
	0x1a, 0x52, 0x0a, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x07, 0x70, 0x6f, 0x64,
	0x4e, 0x75, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x2e, 0x50, 0x6f,
	0x64, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e,
	0x75, 0x6d, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xe9, 0x02, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x70, 0x6f, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x70, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6f, 0x64,
	0x5f, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x64, 0x49, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70,
	0x50, 0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x73,
	0x1a, 0x49, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x06, 0x0a, 0x0a,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x66, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x66, 0x75, 0x6c, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x70,
	0x6f, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x69,
	0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x49, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x69, 0x6e, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x37, 0x0a,
	0x09, 0x50, 0x6f, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3b, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a,
	0x0e, 0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x73, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xaf, 0x02, 0x0a, 0x11,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x70, 0x75, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x70, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x4e, 0x75,
	0x6d, 0x12, 0x31, 0x0a, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x70,
	0x5f, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x70, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x4e, 0x75, 0x6d, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x41,
	0x70, 0x70, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x22, 0xae, 0x01,
	0x0a, 0x15, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x50, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x01, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x22, 0x82, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x69, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x65, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x54,
	0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x7c, 0x0a, 0x12, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a,
	0x13, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x24, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x64, 0x73, 0x42, 0x79, 0x53, 0x49, 0x44,
	0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x62, 0x0a, 0x08, 0x50, 0x6f, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x09, 0x50, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x22, 0xa3, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45,
	0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a,
	0x54, 0x45, 0x4d, 0x49, 0x4e, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x4e,
	0x49, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x43,
	0x48, 0x45, 0x44, 0x55, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f,
	0x54, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x4e, 0x48, 0x45,
	0x41, 0x4c, 0x54, 0x48, 0x59, 0x10, 0x0a, 0x22, 0xf4, 0x01, 0x0a, 0x0c, 0x50, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x70, 0x75, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x63, 0x70, 0x75, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x70, 0x75, 0x22, 0xe1,
	0x02, 0x0a, 0x09, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x50, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x52, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x50, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x50, 0x6f, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x22, 0x39, 0x0a, 0x0e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xa1, 0x03,
	0x0a, 0x12, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x12,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x69,
	0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x71, 0x0a, 0x14, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x59, 0x0a, 0x17, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x15, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x4f, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa0, 0x03, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x74, 0x43, 0x50, 0x55, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x65, 0x74, 0x43, 0x50, 0x55, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x70, 0x75, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x67, 0x70, 0x75, 0x12, 0x15,
	0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x54, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49,
	0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x42, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50,
	0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x22, 0x72, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x0a, 0x41,
	0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12,
	0x23, 0x0a, 0x04, 0x70, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x04,
	0x70, 0x6f, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x50, 0x6f, 0x64, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x50, 0x6f, 0x64, 0x73, 0x1a,
	0x31, 0x0a, 0x03, 0x50, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x1a, 0x36, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x36, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0f, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x68, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0e,
	0x68, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xb6,
	0x01, 0x0a, 0x0e, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x68, 0x61, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x73, 0x22, 0x3c, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x12, 0x2d, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73,
	0x2a, 0x2f, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10,
	0x01, 0x32, 0x91, 0x08, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x38, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2b,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0a, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x73, 0x12, 0x0f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x41, 0x70, 0x70, 0x50,
	0x6f, 0x64, 0x73, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x3c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x64, 0x4e, 0x75, 0x6d, 0x73, 0x22, 0x00, 0x12, 0x2f,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x0f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0b, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x45, 0x6e, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x39, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x68,
	0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x55, 0x70, 0x64, 0x54, 0x68, 0x69,
	0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x54, 0x68, 0x69, 0x72, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x44, 0x65, 0x6c, 0x54, 0x68, 0x69, 0x72,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0c,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x10, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x0a,
	0x2e, 0x50, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0f, 0x2e, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x07, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x0c,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x07, 0x2e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x48, 0x65, 0x6c, 0x6d, 0x41, 0x70, 0x70, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x32, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x0c, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x65, 0x73, 0x22, 0x00, 0x42, 0x12, 0x5a, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_app_runtime_server_proto_rawDescOnce sync.Once
	file_app_runtime_server_proto_rawDescData = file_app_runtime_server_proto_rawDesc
)

func file_app_runtime_server_proto_rawDescGZIP() []byte {
	file_app_runtime_server_proto_rawDescOnce.Do(func() {
		file_app_runtime_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_app_runtime_server_proto_rawDescData)
	})
	return file_app_runtime_server_proto_rawDescData
}

var file_app_runtime_server_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_app_runtime_server_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_app_runtime_server_proto_goTypes = []any{
	(ServiceVolumeStatus)(0),                 // 0: ServiceVolumeStatus
	(PodStatus_Type)(0),                      // 1: PodStatus.Type
	(AppStatus_Status)(0),                    // 2: AppStatus.Status
	(*Empty)(nil),                            // 3: Empty
	(*AppReq)(nil),                           // 4: AppReq
	(*AppStatusReq)(nil),                     // 5: AppStatusReq
	(*ServiceRequest)(nil),                   // 6: ServiceRequest
	(*ServicesRequest)(nil),                  // 7: ServicesRequest
	(*TenantEnvRequest)(nil),                 // 8: TenantEnvRequest
	(*StatusMessage)(nil),                    // 9: StatusMessage
	(*DiskMessage)(nil),                      // 10: DiskMessage
	(*ServiceAppPodList)(nil),                // 11: ServiceAppPodList
	(*MultiServiceAppPodList)(nil),           // 12: MultiServiceAppPodList
	(*ComponentPodNums)(nil),                 // 13: ComponentPodNums
	(*ServiceAppPod)(nil),                    // 14: ServiceAppPod
	(*Container)(nil),                        // 15: Container
	(*DeployInfo)(nil),                       // 16: DeployInfo
	(*TenantEnvResource)(nil),                // 17: TenantEnvResource
	(*TenantEnvResourceList)(nil),            // 18: TenantEnvResourceList
	(*AddThirdPartyEndpointsReq)(nil),        // 19: AddThirdPartyEndpointsReq
	(*UpdThirdPartyEndpointsReq)(nil),        // 20: UpdThirdPartyEndpointsReq
	(*DelThirdPartyEndpointsReq)(nil),        // 21: DelThirdPartyEndpointsReq
	(*ThirdPartyEndpoint)(nil),               // 22: ThirdPartyEndpoint
	(*ThirdPartyEndpoints)(nil),              // 23: ThirdPartyEndpoints
	(*ListPodsBySIDReq)(nil),                 // 24: ListPodsBySIDReq
	(*GetPodDetailReq)(nil),                  // 25: GetPodDetailReq
	(*PodEvent)(nil),                         // 26: PodEvent
	(*PodStatus)(nil),                        // 27: PodStatus
	(*PodContainer)(nil),                     // 28: PodContainer
	(*PodDetail)(nil),                        // 29: PodDetail
	(*StorageClasses)(nil),                   // 30: StorageClasses
	(*StorageClassDetail)(nil),               // 31: StorageClassDetail
	(*TopologySelectorTerm)(nil),             // 32: TopologySelectorTerm
	(*TopologySelectorLabelRequirement)(nil), // 33: TopologySelectorLabelRequirement
	(*ServiceVolumeStatusMessage)(nil),       // 34: ServiceVolumeStatusMessage
	(*AppStatus)(nil),                        // 35: AppStatus
	(*AppStatusCondition)(nil),               // 36: AppStatusCondition
	(*AppService)(nil),                       // 37: AppService
	(*AppServices)(nil),                      // 38: AppServices
	(*HelmAppReleases)(nil),                  // 39: HelmAppReleases
	(*HelmAppRelease)(nil),                   // 40: HelmAppRelease
	(*AppStatusesReq)(nil),                   // 41: AppStatusesReq
	(*AppStatuses)(nil),                      // 42: AppStatuses
	nil,                                      // 43: StatusMessage.StatusEntry
	nil,                                      // 44: DiskMessage.DisksEntry
	nil,                                      // 45: MultiServiceAppPodList.ServicePodsEntry
	nil,                                      // 46: ComponentPodNums.PodNumsEntry
	nil,                                      // 47: ServiceAppPod.ContainersEntry
	nil,                                      // 48: DeployInfo.PodsEntry
	nil,                                      // 49: DeployInfo.ServicesEntry
	nil,                                      // 50: DeployInfo.EndpointsEntry
	nil,                                      // 51: DeployInfo.SecretsEntry
	nil,                                      // 52: DeployInfo.IngressesEntry
	nil,                                      // 53: DeployInfo.ReplicatsetEntry
	nil,                                      // 54: TenantEnvResourceList.ResourcesEntry
	nil,                                      // 55: StorageClassDetail.ParametersEntry
	nil,                                      // 56: ServiceVolumeStatusMessage.StatusEntry
	(*AppService_Pod)(nil),                   // 57: AppService.Pod
	(*AppService_Port)(nil),                  // 58: AppService.Port
}
var file_app_runtime_server_proto_depIdxs = []int32{
	43, // 0: StatusMessage.status:type_name -> StatusMessage.StatusEntry
	44, // 1: DiskMessage.disks:type_name -> DiskMessage.DisksEntry
	14, // 2: ServiceAppPodList.oldPods:type_name -> ServiceAppPod
	14, // 3: ServiceAppPodList.newPods:type_name -> ServiceAppPod
	45, // 4: MultiServiceAppPodList.servicePods:type_name -> MultiServiceAppPodList.ServicePodsEntry
	46, // 5: ComponentPodNums.podNums:type_name -> ComponentPodNums.PodNumsEntry
	47, // 6: ServiceAppPod.containers:type_name -> ServiceAppPod.ContainersEntry
	48, // 7: DeployInfo.pods:type_name -> DeployInfo.PodsEntry
	49, // 8: DeployInfo.services:type_name -> DeployInfo.ServicesEntry
	50, // 9: DeployInfo.endpoints:type_name -> DeployInfo.EndpointsEntry
	51, // 10: DeployInfo.secrets:type_name -> DeployInfo.SecretsEntry
	52, // 11: DeployInfo.ingresses:type_name -> DeployInfo.IngressesEntry
	53, // 12: DeployInfo.replicatset:type_name -> DeployInfo.ReplicatsetEntry
	54, // 13: TenantEnvResourceList.resources:type_name -> TenantEnvResourceList.ResourcesEntry
	22, // 14: ThirdPartyEndpoints.items:type_name -> ThirdPartyEndpoint
	1,  // 15: PodStatus.type:type_name -> PodStatus.Type
	27, // 16: PodDetail.status:type_name -> PodStatus
	28, // 17: PodDetail.init_containers:type_name -> PodContainer
	28, // 18: PodDetail.containers:type_name -> PodContainer
	26, // 19: PodDetail.events:type_name -> PodEvent
	31, // 20: StorageClasses.list:type_name -> StorageClassDetail
	55, // 21: StorageClassDetail.parameters:type_name -> StorageClassDetail.ParametersEntry
	32, // 22: StorageClassDetail.allowed_topologies:type_name -> TopologySelectorTerm
	33, // 23: TopologySelectorTerm.match_label_expressions:type_name -> TopologySelectorLabelRequirement
	56, // 24: ServiceVolumeStatusMessage.status:type_name -> ServiceVolumeStatusMessage.StatusEntry
	36, // 25: AppStatus.conditions:type_name -> AppStatusCondition
	58, // 26: AppService.ports:type_name -> AppService.Port
	57, // 27: AppService.pods:type_name -> AppService.Pod
	57, // 28: AppService.oldPods:type_name -> AppService.Pod
	37, // 29: AppServices.services:type_name -> AppService
	40, // 30: HelmAppReleases.helmAppRelease:type_name -> HelmAppRelease
	35, // 31: AppStatuses.app_statuses:type_name -> AppStatus
	11, // 32: MultiServiceAppPodList.ServicePodsEntry.value:type_name -> ServiceAppPodList
	15, // 33: ServiceAppPod.ContainersEntry.value:type_name -> Container
	17, // 34: TenantEnvResourceList.ResourcesEntry.value:type_name -> TenantEnvResource
	0,  // 35: ServiceVolumeStatusMessage.StatusEntry.value:type_name -> ServiceVolumeStatus
	7,  // 36: AppRuntimeSync.GetServiceStatuses:input_type -> ServicesRequest
	5,  // 37: AppRuntimeSync.GetAppStatus:input_type -> AppStatusReq
	6,  // 38: AppRuntimeSync.GetAppPods:input_type -> ServiceRequest
	7,  // 39: AppRuntimeSync.GetMultiAppPods:input_type -> ServicesRequest
	7,  // 40: AppRuntimeSync.GetComponentPodNums:input_type -> ServicesRequest
	6,  // 41: AppRuntimeSync.GetDeployInfo:input_type -> ServiceRequest
	8,  // 42: AppRuntimeSync.GetTenantEnvResource:input_type -> TenantEnvRequest
	3,  // 43: AppRuntimeSync.GetTenantEnvResources:input_type -> Empty
	6,  // 44: AppRuntimeSync.ListThirdPartyEndpoints:input_type -> ServiceRequest
	19, // 45: AppRuntimeSync.AddThirdPartyEndpoint:input_type -> AddThirdPartyEndpointsReq
	20, // 46: AppRuntimeSync.UpdThirdPartyEndpoint:input_type -> UpdThirdPartyEndpointsReq
	21, // 47: AppRuntimeSync.DelThirdPartyEndpoint:input_type -> DelThirdPartyEndpointsReq
	25, // 48: AppRuntimeSync.GetPodDetail:input_type -> GetPodDetailReq
	3,  // 49: AppRuntimeSync.GetStorageClasses:input_type -> Empty
	6,  // 50: AppRuntimeSync.GetAppVolumeStatus:input_type -> ServiceRequest
	4,  // 51: AppRuntimeSync.ListAppServices:input_type -> AppReq
	4,  // 52: AppRuntimeSync.ListHelmAppRelease:input_type -> AppReq
	41, // 53: AppRuntimeSync.ListAppStatuses:input_type -> AppStatusesReq
	9,  // 54: AppRuntimeSync.GetServiceStatuses:output_type -> StatusMessage
	35, // 55: AppRuntimeSync.GetAppStatus:output_type -> AppStatus
	11, // 56: AppRuntimeSync.GetAppPods:output_type -> ServiceAppPodList
	12, // 57: AppRuntimeSync.GetMultiAppPods:output_type -> MultiServiceAppPodList
	13, // 58: AppRuntimeSync.GetComponentPodNums:output_type -> ComponentPodNums
	16, // 59: AppRuntimeSync.GetDeployInfo:output_type -> DeployInfo
	17, // 60: AppRuntimeSync.GetTenantEnvResource:output_type -> TenantEnvResource
	18, // 61: AppRuntimeSync.GetTenantEnvResources:output_type -> TenantEnvResourceList
	23, // 62: AppRuntimeSync.ListThirdPartyEndpoints:output_type -> ThirdPartyEndpoints
	3,  // 63: AppRuntimeSync.AddThirdPartyEndpoint:output_type -> Empty
	3,  // 64: AppRuntimeSync.UpdThirdPartyEndpoint:output_type -> Empty
	3,  // 65: AppRuntimeSync.DelThirdPartyEndpoint:output_type -> Empty
	29, // 66: AppRuntimeSync.GetPodDetail:output_type -> PodDetail
	30, // 67: AppRuntimeSync.GetStorageClasses:output_type -> StorageClasses
	34, // 68: AppRuntimeSync.GetAppVolumeStatus:output_type -> ServiceVolumeStatusMessage
	38, // 69: AppRuntimeSync.ListAppServices:output_type -> AppServices
	39, // 70: AppRuntimeSync.ListHelmAppRelease:output_type -> HelmAppReleases
	42, // 71: AppRuntimeSync.ListAppStatuses:output_type -> AppStatuses
	54, // [54:72] is the sub-list for method output_type
	36, // [36:54] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_app_runtime_server_proto_init() }
func file_app_runtime_server_proto_init() {
	if File_app_runtime_server_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_app_runtime_server_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_app_runtime_server_proto_goTypes,
		DependencyIndexes: file_app_runtime_server_proto_depIdxs,
		EnumInfos:         file_app_runtime_server_proto_enumTypes,
		MessageInfos:      file_app_runtime_server_proto_msgTypes,
	}.Build()
	File_app_runtime_server_proto = out.File
	file_app_runtime_server_proto_rawDesc = nil
	file_app_runtime_server_proto_goTypes = nil
	file_app_runtime_server_proto_depIdxs = nil
}
