// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: message.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskQueue_Enqueue_FullMethodName = "/pb.TaskQueue/Enqueue"
	TaskQueue_Topics_FullMethodName  = "/pb.TaskQueue/Topics"
	TaskQueue_Dequeue_FullMethodName = "/pb.TaskQueue/Dequeue"
)

// TaskQueueClient is the client API for TaskQueue service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskQueueClient interface {
	Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*TaskReply, error)
	Topics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TaskReply, error)
	Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*TaskMessage, error)
}

type taskQueueClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskQueueClient(cc grpc.ClientConnInterface) TaskQueueClient {
	return &taskQueueClient{cc}
}

func (c *taskQueueClient) Enqueue(ctx context.Context, in *EnqueueRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, TaskQueue_Enqueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) Topics(ctx context.Context, in *TopicRequest, opts ...grpc.CallOption) (*TaskReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskReply)
	err := c.cc.Invoke(ctx, TaskQueue_Topics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskQueueClient) Dequeue(ctx context.Context, in *DequeueRequest, opts ...grpc.CallOption) (*TaskMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskMessage)
	err := c.cc.Invoke(ctx, TaskQueue_Dequeue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskQueueServer is the server API for TaskQueue service.
// All implementations must embed UnimplementedTaskQueueServer
// for forward compatibility.
type TaskQueueServer interface {
	Enqueue(context.Context, *EnqueueRequest) (*TaskReply, error)
	Topics(context.Context, *TopicRequest) (*TaskReply, error)
	Dequeue(context.Context, *DequeueRequest) (*TaskMessage, error)
	mustEmbedUnimplementedTaskQueueServer()
}

// UnimplementedTaskQueueServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskQueueServer struct{}

func (UnimplementedTaskQueueServer) Enqueue(context.Context, *EnqueueRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (UnimplementedTaskQueueServer) Topics(context.Context, *TopicRequest) (*TaskReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Topics not implemented")
}
func (UnimplementedTaskQueueServer) Dequeue(context.Context, *DequeueRequest) (*TaskMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dequeue not implemented")
}
func (UnimplementedTaskQueueServer) mustEmbedUnimplementedTaskQueueServer() {}
func (UnimplementedTaskQueueServer) testEmbeddedByValue()                   {}

// UnsafeTaskQueueServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskQueueServer will
// result in compilation errors.
type UnsafeTaskQueueServer interface {
	mustEmbedUnimplementedTaskQueueServer()
}

func RegisterTaskQueueServer(s grpc.ServiceRegistrar, srv TaskQueueServer) {
	// If the following call pancis, it indicates UnimplementedTaskQueueServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskQueue_ServiceDesc, srv)
}

func _TaskQueue_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_Enqueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).Enqueue(ctx, req.(*EnqueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_Topics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).Topics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_Topics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).Topics(ctx, req.(*TopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskQueue_Dequeue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DequeueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskQueueServer).Dequeue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskQueue_Dequeue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskQueueServer).Dequeue(ctx, req.(*DequeueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskQueue_ServiceDesc is the grpc.ServiceDesc for TaskQueue service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskQueue_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TaskQueue",
	HandlerType: (*TaskQueueServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _TaskQueue_Enqueue_Handler,
		},
		{
			MethodName: "Topics",
			Handler:    _TaskQueue_Topics_Handler,
		},
		{
			MethodName: "Dequeue",
			Handler:    _TaskQueue_Dequeue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
