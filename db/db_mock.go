// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	dao "github.com/wutong-paas/wutong/db/dao"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// CloseManager mocks base method
func (m *MockManager) CloseManager() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseManager")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseManager indicates an expected call of CloseManager
func (mr *MockManagerMockRecorder) CloseManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseManager", reflect.TypeOf((*MockManager)(nil).CloseManager))
}

// Begin mocks base method
func (m *MockManager) Begin() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Begin indicates an expected call of Begin
func (mr *MockManagerMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockManager)(nil).Begin))
}

// DB mocks base method
func (m *MockManager) DB() *gorm.DB {
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// DB indicates an expected call of DB
func (mr *MockManagerMockRecorder) DB() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockManager)(nil).DB))
}

// EnsureEndTransactionFunc mocks base method
func (m *MockManager) EnsureEndTransactionFunc() func(*gorm.DB) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureEndTransactionFunc")
	ret0, _ := ret[0].(func(*gorm.DB))
	return ret0
}

// EnsureEndTransactionFunc indicates an expected call of EnsureEndTransactionFunc
func (mr *MockManagerMockRecorder) EnsureEndTransactionFunc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureEndTransactionFunc", reflect.TypeOf((*MockManager)(nil).EnsureEndTransactionFunc))
}

// VolumeTypeDao mocks base method
func (m *MockManager) VolumeTypeDao() dao.VolumeTypeDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VolumeTypeDao")
	ret0, _ := ret[0].(dao.VolumeTypeDao)
	return ret0
}

// VolumeTypeDao indicates an expected call of VolumeTypeDao
func (mr *MockManagerMockRecorder) VolumeTypeDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VolumeTypeDao", reflect.TypeOf((*MockManager)(nil).VolumeTypeDao))
}

// LicenseDao mocks base method
func (m *MockManager) LicenseDao() dao.LicenseDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LicenseDao")
	ret0, _ := ret[0].(dao.LicenseDao)
	return ret0
}

// LicenseDao indicates an expected call of LicenseDao
func (mr *MockManagerMockRecorder) LicenseDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LicenseDao", reflect.TypeOf((*MockManager)(nil).LicenseDao))
}

// AppDao mocks base method
func (m *MockManager) AppDao() dao.AppDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppDao")
	ret0, _ := ret[0].(dao.AppDao)
	return ret0
}

// AppDao indicates an expected call of AppDao
func (mr *MockManagerMockRecorder) AppDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppDao", reflect.TypeOf((*MockManager)(nil).AppDao))
}

// ApplicationDao mocks base method
func (m *MockManager) ApplicationDao() dao.ApplicationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDao")
	ret0, _ := ret[0].(dao.ApplicationDao)
	return ret0
}

// ApplicationDao indicates an expected call of ApplicationDao
func (mr *MockManagerMockRecorder) ApplicationDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDao", reflect.TypeOf((*MockManager)(nil).ApplicationDao))
}

// ApplicationDaoTransactions mocks base method
func (m *MockManager) ApplicationDaoTransactions(db *gorm.DB) dao.ApplicationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationDaoTransactions", db)
	ret0, _ := ret[0].(dao.ApplicationDao)
	return ret0
}

// ApplicationDaoTransactions indicates an expected call of ApplicationDaoTransactions
func (mr *MockManagerMockRecorder) ApplicationDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationDaoTransactions", reflect.TypeOf((*MockManager)(nil).ApplicationDaoTransactions), db)
}

// AppConfigGroupDao mocks base method
func (m *MockManager) AppConfigGroupDao() dao.AppConfigGroupDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupDao")
	ret0, _ := ret[0].(dao.AppConfigGroupDao)
	return ret0
}

// AppConfigGroupDao indicates an expected call of AppConfigGroupDao
func (mr *MockManagerMockRecorder) AppConfigGroupDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupDao", reflect.TypeOf((*MockManager)(nil).AppConfigGroupDao))
}

// AppConfigGroupDaoTransactions mocks base method
func (m *MockManager) AppConfigGroupDaoTransactions(db *gorm.DB) dao.AppConfigGroupDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupDaoTransactions", db)
	ret0, _ := ret[0].(dao.AppConfigGroupDao)
	return ret0
}

// AppConfigGroupDaoTransactions indicates an expected call of AppConfigGroupDaoTransactions
func (mr *MockManagerMockRecorder) AppConfigGroupDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupDaoTransactions", reflect.TypeOf((*MockManager)(nil).AppConfigGroupDaoTransactions), db)
}

// AppConfigGroupServiceDao mocks base method
func (m *MockManager) AppConfigGroupServiceDao() dao.AppConfigGroupServiceDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupServiceDao")
	ret0, _ := ret[0].(dao.AppConfigGroupServiceDao)
	return ret0
}

// AppConfigGroupServiceDao indicates an expected call of AppConfigGroupServiceDao
func (mr *MockManagerMockRecorder) AppConfigGroupServiceDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupServiceDao", reflect.TypeOf((*MockManager)(nil).AppConfigGroupServiceDao))
}

// AppConfigGroupServiceDaoTransactions mocks base method
func (m *MockManager) AppConfigGroupServiceDaoTransactions(db *gorm.DB) dao.AppConfigGroupServiceDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupServiceDaoTransactions", db)
	ret0, _ := ret[0].(dao.AppConfigGroupServiceDao)
	return ret0
}

// AppConfigGroupServiceDaoTransactions indicates an expected call of AppConfigGroupServiceDaoTransactions
func (mr *MockManagerMockRecorder) AppConfigGroupServiceDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupServiceDaoTransactions", reflect.TypeOf((*MockManager)(nil).AppConfigGroupServiceDaoTransactions), db)
}

// AppConfigGroupItemDao mocks base method
func (m *MockManager) AppConfigGroupItemDao() dao.AppConfigGroupItemDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupItemDao")
	ret0, _ := ret[0].(dao.AppConfigGroupItemDao)
	return ret0
}

// AppConfigGroupItemDao indicates an expected call of AppConfigGroupItemDao
func (mr *MockManagerMockRecorder) AppConfigGroupItemDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupItemDao", reflect.TypeOf((*MockManager)(nil).AppConfigGroupItemDao))
}

// AppConfigGroupItemDaoTransactions mocks base method
func (m *MockManager) AppConfigGroupItemDaoTransactions(db *gorm.DB) dao.AppConfigGroupItemDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppConfigGroupItemDaoTransactions", db)
	ret0, _ := ret[0].(dao.AppConfigGroupItemDao)
	return ret0
}

// AppConfigGroupItemDaoTransactions indicates an expected call of AppConfigGroupItemDaoTransactions
func (mr *MockManagerMockRecorder) AppConfigGroupItemDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppConfigGroupItemDaoTransactions", reflect.TypeOf((*MockManager)(nil).AppConfigGroupItemDaoTransactions), db)
}

// EnterpriseDao mocks base method
func (m *MockManager) EnterpriseDao() dao.EnterpriseDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterpriseDao")
	ret0, _ := ret[0].(dao.EnterpriseDao)
	return ret0
}

// EnterpriseDao indicates an expected call of EnterpriseDao
func (mr *MockManagerMockRecorder) EnterpriseDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterpriseDao", reflect.TypeOf((*MockManager)(nil).EnterpriseDao))
}

// TenantEnvDao mocks base method
func (m *MockManager) TenantEnvDao() dao.TenantEnvDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvDao")
	ret0, _ := ret[0].(dao.TenantEnvDao)
	return ret0
}

// TenantEnvDao indicates an expected call of TenantEnvDao
func (mr *MockManagerMockRecorder) TenantEnvDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvDao", reflect.TypeOf((*MockManager)(nil).TenantEnvDao))
}

// TenantEnvDaoTransactions mocks base method
func (m *MockManager) TenantEnvDaoTransactions(db *gorm.DB) dao.TenantEnvDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvDao)
	return ret0
}

// TenantEnvDaoTransactions indicates an expected call of TenantEnvDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvDaoTransactions), db)
}

// TenantEnvServiceDao mocks base method
func (m *MockManager) TenantEnvServiceDao() dao.TenantEnvServiceDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceDao)
	return ret0
}

// TenantEnvServiceDao indicates an expected call of TenantEnvServiceDao
func (mr *MockManagerMockRecorder) TenantEnvServiceDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceDao))
}

// TenantEnvServiceDeleteDao mocks base method
func (m *MockManager) TenantEnvServiceDeleteDao() dao.TenantEnvServiceDeleteDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceDeleteDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceDeleteDao)
	return ret0
}

// TenantEnvServiceDeleteDao indicates an expected call of TenantEnvServiceDeleteDao
func (mr *MockManagerMockRecorder) TenantEnvServiceDeleteDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceDeleteDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceDeleteDao))
}

// TenantEnvServiceDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceDaoTransactions(db *gorm.DB) dao.TenantEnvServiceDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceDao)
	return ret0
}

// TenantEnvServiceDaoTransactions indicates an expected call of TenantEnvServiceDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceDaoTransactions), db)
}

// TenantEnvServiceDeleteDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceDeleteDaoTransactions(db *gorm.DB) dao.TenantEnvServiceDeleteDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceDeleteDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceDeleteDao)
	return ret0
}

// TenantEnvServiceDeleteDaoTransactions indicates an expected call of TenantEnvServiceDeleteDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceDeleteDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceDeleteDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceDeleteDaoTransactions), db)
}

// TenantEnvServicesPortDao mocks base method
func (m *MockManager) TenantEnvServicesPortDao() dao.TenantEnvServicesPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicesPortDao")
	ret0, _ := ret[0].(dao.TenantEnvServicesPortDao)
	return ret0
}

// TenantEnvServicesPortDao indicates an expected call of TenantEnvServicesPortDao
func (mr *MockManagerMockRecorder) TenantEnvServicesPortDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicesPortDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServicesPortDao))
}

// TenantEnvServicesPortDaoTransactions mocks base method
func (m *MockManager) TenantEnvServicesPortDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServicesPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicesPortDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServicesPortDao)
	return ret0
}

// TenantEnvServicesPortDaoTransactions indicates an expected call of TenantEnvServicesPortDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServicesPortDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicesPortDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServicesPortDaoTransactions), arg0)
}

// TenantEnvServiceRelationDao mocks base method
func (m *MockManager) TenantEnvServiceRelationDao() dao.TenantEnvServiceRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceRelationDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceRelationDao)
	return ret0
}

// TenantEnvServiceRelationDao indicates an expected call of TenantEnvServiceRelationDao
func (mr *MockManagerMockRecorder) TenantEnvServiceRelationDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceRelationDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceRelationDao))
}

// TenantEnvServiceRelationDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceRelationDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServiceRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceRelationDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServiceRelationDao)
	return ret0
}

// TenantEnvServiceRelationDaoTransactions indicates an expected call of TenantEnvServiceRelationDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceRelationDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceRelationDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceRelationDaoTransactions), arg0)
}

// TenantEnvServiceEnvVarDao mocks base method
func (m *MockManager) TenantEnvServiceEnvVarDao() dao.TenantEnvServiceEnvVarDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceEnvVarDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceEnvVarDao)
	return ret0
}

// TenantEnvServiceEnvVarDao indicates an expected call of TenantEnvServiceEnvVarDao
func (mr *MockManagerMockRecorder) TenantEnvServiceEnvVarDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceEnvVarDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceEnvVarDao))
}

// TenantEnvServiceEnvVarDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceEnvVarDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServiceEnvVarDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceEnvVarDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServiceEnvVarDao)
	return ret0
}

// TenantEnvServiceEnvVarDaoTransactions indicates an expected call of TenantEnvServiceEnvVarDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceEnvVarDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceEnvVarDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceEnvVarDaoTransactions), arg0)
}

// TenantEnvServiceMountRelationDao mocks base method
func (m *MockManager) TenantEnvServiceMountRelationDao() dao.TenantEnvServiceMountRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceMountRelationDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceMountRelationDao)
	return ret0
}

// TenantEnvServiceMountRelationDao indicates an expected call of TenantEnvServiceMountRelationDao
func (mr *MockManagerMockRecorder) TenantEnvServiceMountRelationDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceMountRelationDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceMountRelationDao))
}

// TenantEnvServiceMountRelationDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceMountRelationDaoTransactions(db *gorm.DB) dao.TenantEnvServiceMountRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceMountRelationDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceMountRelationDao)
	return ret0
}

// TenantEnvServiceMountRelationDaoTransactions indicates an expected call of TenantEnvServiceMountRelationDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceMountRelationDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceMountRelationDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceMountRelationDaoTransactions), db)
}

// TenantEnvServiceVolumeDao mocks base method
func (m *MockManager) TenantEnvServiceVolumeDao() dao.TenantEnvServiceVolumeDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceVolumeDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceVolumeDao)
	return ret0
}

// TenantEnvServiceVolumeDao indicates an expected call of TenantEnvServiceVolumeDao
func (mr *MockManagerMockRecorder) TenantEnvServiceVolumeDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceVolumeDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceVolumeDao))
}

// TenantEnvServiceVolumeDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceVolumeDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServiceVolumeDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceVolumeDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServiceVolumeDao)
	return ret0
}

// TenantEnvServiceVolumeDaoTransactions indicates an expected call of TenantEnvServiceVolumeDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceVolumeDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceVolumeDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceVolumeDaoTransactions), arg0)
}

// TenantEnvServiceConfigFileDao mocks base method
func (m *MockManager) TenantEnvServiceConfigFileDao() dao.TenantEnvServiceConfigFileDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceConfigFileDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceConfigFileDao)
	return ret0
}

// TenantEnvServiceConfigFileDao indicates an expected call of TenantEnvServiceConfigFileDao
func (mr *MockManagerMockRecorder) TenantEnvServiceConfigFileDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceConfigFileDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceConfigFileDao))
}

// TenantEnvServiceConfigFileDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceConfigFileDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServiceConfigFileDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceConfigFileDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServiceConfigFileDao)
	return ret0
}

// TenantEnvServiceConfigFileDaoTransactions indicates an expected call of TenantEnvServiceConfigFileDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceConfigFileDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceConfigFileDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceConfigFileDaoTransactions), arg0)
}

// ServiceProbeDao mocks base method
func (m *MockManager) ServiceProbeDao() dao.ServiceProbeDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceProbeDao")
	ret0, _ := ret[0].(dao.ServiceProbeDao)
	return ret0
}

// ServiceProbeDao indicates an expected call of ServiceProbeDao
func (mr *MockManagerMockRecorder) ServiceProbeDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceProbeDao", reflect.TypeOf((*MockManager)(nil).ServiceProbeDao))
}

// ServiceProbeDaoTransactions mocks base method
func (m *MockManager) ServiceProbeDaoTransactions(arg0 *gorm.DB) dao.ServiceProbeDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceProbeDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.ServiceProbeDao)
	return ret0
}

// ServiceProbeDaoTransactions indicates an expected call of ServiceProbeDaoTransactions
func (mr *MockManagerMockRecorder) ServiceProbeDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceProbeDaoTransactions", reflect.TypeOf((*MockManager)(nil).ServiceProbeDaoTransactions), arg0)
}

// TenantEnvServiceLBMappingPortDao mocks base method
func (m *MockManager) TenantEnvServiceLBMappingPortDao() dao.TenantEnvServiceLBMappingPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceLBMappingPortDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceLBMappingPortDao)
	return ret0
}

// TenantEnvServiceLBMappingPortDao indicates an expected call of TenantEnvServiceLBMappingPortDao
func (mr *MockManagerMockRecorder) TenantEnvServiceLBMappingPortDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceLBMappingPortDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceLBMappingPortDao))
}

// TenantEnvServiceLBMappingPortDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceLBMappingPortDaoTransactions(arg0 *gorm.DB) dao.TenantEnvServiceLBMappingPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceLBMappingPortDaoTransactions", arg0)
	ret0, _ := ret[0].(dao.TenantEnvServiceLBMappingPortDao)
	return ret0
}

// TenantEnvServiceLBMappingPortDaoTransactions indicates an expected call of TenantEnvServiceLBMappingPortDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceLBMappingPortDaoTransactions(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceLBMappingPortDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceLBMappingPortDaoTransactions), arg0)
}

// TenantEnvServiceLabelDao mocks base method
func (m *MockManager) TenantEnvServiceLabelDao() dao.TenantEnvServiceLabelDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceLabelDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceLabelDao)
	return ret0
}

// TenantEnvServiceLabelDao indicates an expected call of TenantEnvServiceLabelDao
func (mr *MockManagerMockRecorder) TenantEnvServiceLabelDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceLabelDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceLabelDao))
}

// TenantEnvServiceLabelDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceLabelDaoTransactions(db *gorm.DB) dao.TenantEnvServiceLabelDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceLabelDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceLabelDao)
	return ret0
}

// TenantEnvServiceLabelDaoTransactions indicates an expected call of TenantEnvServiceLabelDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceLabelDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceLabelDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceLabelDaoTransactions), db)
}

// LocalSchedulerDao mocks base method
func (m *MockManager) LocalSchedulerDao() dao.LocalSchedulerDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalSchedulerDao")
	ret0, _ := ret[0].(dao.LocalSchedulerDao)
	return ret0
}

// LocalSchedulerDao indicates an expected call of LocalSchedulerDao
func (mr *MockManagerMockRecorder) LocalSchedulerDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalSchedulerDao", reflect.TypeOf((*MockManager)(nil).LocalSchedulerDao))
}

// TenantEnvPluginDaoTransactions mocks base method
func (m *MockManager) TenantEnvPluginDaoTransactions(db *gorm.DB) dao.TenantEnvPluginDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvPluginDao)
	return ret0
}

// TenantEnvPluginDaoTransactions indicates an expected call of TenantEnvPluginDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvPluginDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginDaoTransactions), db)
}

// TenantEnvPluginDao mocks base method
func (m *MockManager) TenantEnvPluginDao() dao.TenantEnvPluginDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginDao")
	ret0, _ := ret[0].(dao.TenantEnvPluginDao)
	return ret0
}

// TenantEnvPluginDao indicates an expected call of TenantEnvPluginDao
func (mr *MockManagerMockRecorder) TenantEnvPluginDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginDao", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginDao))
}

// TenantEnvPluginDefaultENVDaoTransactions mocks base method
func (m *MockManager) TenantEnvPluginDefaultENVDaoTransactions(db *gorm.DB) dao.TenantEnvPluginDefaultENVDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginDefaultENVDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvPluginDefaultENVDao)
	return ret0
}

// TenantEnvPluginDefaultENVDaoTransactions indicates an expected call of TenantEnvPluginDefaultENVDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvPluginDefaultENVDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginDefaultENVDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginDefaultENVDaoTransactions), db)
}

// TenantEnvPluginDefaultENVDao mocks base method
func (m *MockManager) TenantEnvPluginDefaultENVDao() dao.TenantEnvPluginDefaultENVDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginDefaultENVDao")
	ret0, _ := ret[0].(dao.TenantEnvPluginDefaultENVDao)
	return ret0
}

// TenantEnvPluginDefaultENVDao indicates an expected call of TenantEnvPluginDefaultENVDao
func (mr *MockManagerMockRecorder) TenantEnvPluginDefaultENVDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginDefaultENVDao", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginDefaultENVDao))
}

// TenantEnvPluginBuildVersionDao mocks base method
func (m *MockManager) TenantEnvPluginBuildVersionDao() dao.TenantEnvPluginBuildVersionDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginBuildVersionDao")
	ret0, _ := ret[0].(dao.TenantEnvPluginBuildVersionDao)
	return ret0
}

// TenantEnvPluginBuildVersionDao indicates an expected call of TenantEnvPluginBuildVersionDao
func (mr *MockManagerMockRecorder) TenantEnvPluginBuildVersionDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginBuildVersionDao", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginBuildVersionDao))
}

// TenantEnvPluginBuildVersionDaoTransactions mocks base method
func (m *MockManager) TenantEnvPluginBuildVersionDaoTransactions(db *gorm.DB) dao.TenantEnvPluginBuildVersionDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginBuildVersionDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvPluginBuildVersionDao)
	return ret0
}

// TenantEnvPluginBuildVersionDaoTransactions indicates an expected call of TenantEnvPluginBuildVersionDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvPluginBuildVersionDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginBuildVersionDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginBuildVersionDaoTransactions), db)
}

// TenantEnvPluginVersionENVDao mocks base method
func (m *MockManager) TenantEnvPluginVersionENVDao() dao.TenantEnvPluginVersionEnvDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginVersionENVDao")
	ret0, _ := ret[0].(dao.TenantEnvPluginVersionEnvDao)
	return ret0
}

// TenantEnvPluginVersionENVDao indicates an expected call of TenantEnvPluginVersionENVDao
func (mr *MockManagerMockRecorder) TenantEnvPluginVersionENVDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginVersionENVDao", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginVersionENVDao))
}

// TenantEnvPluginVersionENVDaoTransactions mocks base method
func (m *MockManager) TenantEnvPluginVersionENVDaoTransactions(db *gorm.DB) dao.TenantEnvPluginVersionEnvDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginVersionENVDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvPluginVersionEnvDao)
	return ret0
}

// TenantEnvPluginVersionENVDaoTransactions indicates an expected call of TenantEnvPluginVersionENVDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvPluginVersionENVDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginVersionENVDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginVersionENVDaoTransactions), db)
}

// TenantEnvPluginVersionConfigDao mocks base method
func (m *MockManager) TenantEnvPluginVersionConfigDao() dao.TenantEnvPluginVersionConfigDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginVersionConfigDao")
	ret0, _ := ret[0].(dao.TenantEnvPluginVersionConfigDao)
	return ret0
}

// TenantEnvPluginVersionConfigDao indicates an expected call of TenantEnvPluginVersionConfigDao
func (mr *MockManagerMockRecorder) TenantEnvPluginVersionConfigDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginVersionConfigDao", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginVersionConfigDao))
}

// TenantEnvPluginVersionConfigDaoTransactions mocks base method
func (m *MockManager) TenantEnvPluginVersionConfigDaoTransactions(db *gorm.DB) dao.TenantEnvPluginVersionConfigDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvPluginVersionConfigDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvPluginVersionConfigDao)
	return ret0
}

// TenantEnvPluginVersionConfigDaoTransactions indicates an expected call of TenantEnvPluginVersionConfigDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvPluginVersionConfigDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvPluginVersionConfigDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvPluginVersionConfigDaoTransactions), db)
}

// TenantEnvServicePluginRelationDao mocks base method
func (m *MockManager) TenantEnvServicePluginRelationDao() dao.TenantEnvServicePluginRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicePluginRelationDao")
	ret0, _ := ret[0].(dao.TenantEnvServicePluginRelationDao)
	return ret0
}

// TenantEnvServicePluginRelationDao indicates an expected call of TenantEnvServicePluginRelationDao
func (mr *MockManagerMockRecorder) TenantEnvServicePluginRelationDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicePluginRelationDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServicePluginRelationDao))
}

// TenantEnvServicePluginRelationDaoTransactions mocks base method
func (m *MockManager) TenantEnvServicePluginRelationDaoTransactions(db *gorm.DB) dao.TenantEnvServicePluginRelationDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicePluginRelationDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServicePluginRelationDao)
	return ret0
}

// TenantEnvServicePluginRelationDaoTransactions indicates an expected call of TenantEnvServicePluginRelationDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServicePluginRelationDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicePluginRelationDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServicePluginRelationDaoTransactions), db)
}

// TenantEnvServicesStreamPluginPortDao mocks base method
func (m *MockManager) TenantEnvServicesStreamPluginPortDao() dao.TenantEnvServicesStreamPluginPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicesStreamPluginPortDao")
	ret0, _ := ret[0].(dao.TenantEnvServicesStreamPluginPortDao)
	return ret0
}

// TenantEnvServicesStreamPluginPortDao indicates an expected call of TenantEnvServicesStreamPluginPortDao
func (mr *MockManagerMockRecorder) TenantEnvServicesStreamPluginPortDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicesStreamPluginPortDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServicesStreamPluginPortDao))
}

// TenantEnvServicesStreamPluginPortDaoTransactions mocks base method
func (m *MockManager) TenantEnvServicesStreamPluginPortDaoTransactions(db *gorm.DB) dao.TenantEnvServicesStreamPluginPortDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServicesStreamPluginPortDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServicesStreamPluginPortDao)
	return ret0
}

// TenantEnvServicesStreamPluginPortDaoTransactions indicates an expected call of TenantEnvServicesStreamPluginPortDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServicesStreamPluginPortDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServicesStreamPluginPortDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServicesStreamPluginPortDaoTransactions), db)
}

// CodeCheckResultDao mocks base method
func (m *MockManager) CodeCheckResultDao() dao.CodeCheckResultDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeCheckResultDao")
	ret0, _ := ret[0].(dao.CodeCheckResultDao)
	return ret0
}

// CodeCheckResultDao indicates an expected call of CodeCheckResultDao
func (mr *MockManagerMockRecorder) CodeCheckResultDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeCheckResultDao", reflect.TypeOf((*MockManager)(nil).CodeCheckResultDao))
}

// CodeCheckResultDaoTransactions mocks base method
func (m *MockManager) CodeCheckResultDaoTransactions(db *gorm.DB) dao.CodeCheckResultDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeCheckResultDaoTransactions", db)
	ret0, _ := ret[0].(dao.CodeCheckResultDao)
	return ret0
}

// CodeCheckResultDaoTransactions indicates an expected call of CodeCheckResultDaoTransactions
func (mr *MockManagerMockRecorder) CodeCheckResultDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeCheckResultDaoTransactions", reflect.TypeOf((*MockManager)(nil).CodeCheckResultDaoTransactions), db)
}

// ServiceEventDao mocks base method
func (m *MockManager) ServiceEventDao() dao.EventDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEventDao")
	ret0, _ := ret[0].(dao.EventDao)
	return ret0
}

// ServiceEventDao indicates an expected call of ServiceEventDao
func (mr *MockManagerMockRecorder) ServiceEventDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEventDao", reflect.TypeOf((*MockManager)(nil).ServiceEventDao))
}

// ServiceEventDaoTransactions mocks base method
func (m *MockManager) ServiceEventDaoTransactions(db *gorm.DB) dao.EventDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceEventDaoTransactions", db)
	ret0, _ := ret[0].(dao.EventDao)
	return ret0
}

// ServiceEventDaoTransactions indicates an expected call of ServiceEventDaoTransactions
func (mr *MockManagerMockRecorder) ServiceEventDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceEventDaoTransactions", reflect.TypeOf((*MockManager)(nil).ServiceEventDaoTransactions), db)
}

// VersionInfoDao mocks base method
func (m *MockManager) VersionInfoDao() dao.VersionInfoDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionInfoDao")
	ret0, _ := ret[0].(dao.VersionInfoDao)
	return ret0
}

// VersionInfoDao indicates an expected call of VersionInfoDao
func (mr *MockManagerMockRecorder) VersionInfoDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionInfoDao", reflect.TypeOf((*MockManager)(nil).VersionInfoDao))
}

// VersionInfoDaoTransactions mocks base method
func (m *MockManager) VersionInfoDaoTransactions(db *gorm.DB) dao.VersionInfoDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VersionInfoDaoTransactions", db)
	ret0, _ := ret[0].(dao.VersionInfoDao)
	return ret0
}

// VersionInfoDaoTransactions indicates an expected call of VersionInfoDaoTransactions
func (mr *MockManagerMockRecorder) VersionInfoDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VersionInfoDaoTransactions", reflect.TypeOf((*MockManager)(nil).VersionInfoDaoTransactions), db)
}

// RegionUserInfoDao mocks base method
func (m *MockManager) RegionUserInfoDao() dao.RegionUserInfoDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionUserInfoDao")
	ret0, _ := ret[0].(dao.RegionUserInfoDao)
	return ret0
}

// RegionUserInfoDao indicates an expected call of RegionUserInfoDao
func (mr *MockManagerMockRecorder) RegionUserInfoDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionUserInfoDao", reflect.TypeOf((*MockManager)(nil).RegionUserInfoDao))
}

// RegionUserInfoDaoTransactions mocks base method
func (m *MockManager) RegionUserInfoDaoTransactions(db *gorm.DB) dao.RegionUserInfoDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionUserInfoDaoTransactions", db)
	ret0, _ := ret[0].(dao.RegionUserInfoDao)
	return ret0
}

// RegionUserInfoDaoTransactions indicates an expected call of RegionUserInfoDaoTransactions
func (mr *MockManagerMockRecorder) RegionUserInfoDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionUserInfoDaoTransactions", reflect.TypeOf((*MockManager)(nil).RegionUserInfoDaoTransactions), db)
}

// RegionAPIClassDao mocks base method
func (m *MockManager) RegionAPIClassDao() dao.RegionAPIClassDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionAPIClassDao")
	ret0, _ := ret[0].(dao.RegionAPIClassDao)
	return ret0
}

// RegionAPIClassDao indicates an expected call of RegionAPIClassDao
func (mr *MockManagerMockRecorder) RegionAPIClassDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionAPIClassDao", reflect.TypeOf((*MockManager)(nil).RegionAPIClassDao))
}

// RegionAPIClassDaoTransactions mocks base method
func (m *MockManager) RegionAPIClassDaoTransactions(db *gorm.DB) dao.RegionAPIClassDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegionAPIClassDaoTransactions", db)
	ret0, _ := ret[0].(dao.RegionAPIClassDao)
	return ret0
}

// RegionAPIClassDaoTransactions indicates an expected call of RegionAPIClassDaoTransactions
func (mr *MockManagerMockRecorder) RegionAPIClassDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegionAPIClassDaoTransactions", reflect.TypeOf((*MockManager)(nil).RegionAPIClassDaoTransactions), db)
}

// NotificationEventDao mocks base method
func (m *MockManager) NotificationEventDao() dao.NotificationEventDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotificationEventDao")
	ret0, _ := ret[0].(dao.NotificationEventDao)
	return ret0
}

// NotificationEventDao indicates an expected call of NotificationEventDao
func (mr *MockManagerMockRecorder) NotificationEventDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotificationEventDao", reflect.TypeOf((*MockManager)(nil).NotificationEventDao))
}

// AppBackupDao mocks base method
func (m *MockManager) AppBackupDao() dao.AppBackupDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppBackupDao")
	ret0, _ := ret[0].(dao.AppBackupDao)
	return ret0
}

// AppBackupDao indicates an expected call of AppBackupDao
func (mr *MockManagerMockRecorder) AppBackupDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppBackupDao", reflect.TypeOf((*MockManager)(nil).AppBackupDao))
}

// AppBackupDaoTransactions mocks base method
func (m *MockManager) AppBackupDaoTransactions(db *gorm.DB) dao.AppBackupDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppBackupDaoTransactions", db)
	ret0, _ := ret[0].(dao.AppBackupDao)
	return ret0
}

// AppBackupDaoTransactions indicates an expected call of AppBackupDaoTransactions
func (mr *MockManagerMockRecorder) AppBackupDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppBackupDaoTransactions", reflect.TypeOf((*MockManager)(nil).AppBackupDaoTransactions), db)
}

// ServiceSourceDao mocks base method
func (m *MockManager) ServiceSourceDao() dao.ServiceSourceDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceSourceDao")
	ret0, _ := ret[0].(dao.ServiceSourceDao)
	return ret0
}

// ServiceSourceDao indicates an expected call of ServiceSourceDao
func (mr *MockManagerMockRecorder) ServiceSourceDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceSourceDao", reflect.TypeOf((*MockManager)(nil).ServiceSourceDao))
}

// CertificateDao mocks base method
func (m *MockManager) CertificateDao() dao.CertificateDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateDao")
	ret0, _ := ret[0].(dao.CertificateDao)
	return ret0
}

// CertificateDao indicates an expected call of CertificateDao
func (mr *MockManagerMockRecorder) CertificateDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateDao", reflect.TypeOf((*MockManager)(nil).CertificateDao))
}

// CertificateDaoTransactions mocks base method
func (m *MockManager) CertificateDaoTransactions(db *gorm.DB) dao.CertificateDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CertificateDaoTransactions", db)
	ret0, _ := ret[0].(dao.CertificateDao)
	return ret0
}

// CertificateDaoTransactions indicates an expected call of CertificateDaoTransactions
func (mr *MockManagerMockRecorder) CertificateDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CertificateDaoTransactions", reflect.TypeOf((*MockManager)(nil).CertificateDaoTransactions), db)
}

// RuleExtensionDao mocks base method
func (m *MockManager) RuleExtensionDao() dao.RuleExtensionDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuleExtensionDao")
	ret0, _ := ret[0].(dao.RuleExtensionDao)
	return ret0
}

// RuleExtensionDao indicates an expected call of RuleExtensionDao
func (mr *MockManagerMockRecorder) RuleExtensionDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuleExtensionDao", reflect.TypeOf((*MockManager)(nil).RuleExtensionDao))
}

// RuleExtensionDaoTransactions mocks base method
func (m *MockManager) RuleExtensionDaoTransactions(db *gorm.DB) dao.RuleExtensionDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RuleExtensionDaoTransactions", db)
	ret0, _ := ret[0].(dao.RuleExtensionDao)
	return ret0
}

// RuleExtensionDaoTransactions indicates an expected call of RuleExtensionDaoTransactions
func (mr *MockManagerMockRecorder) RuleExtensionDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RuleExtensionDaoTransactions", reflect.TypeOf((*MockManager)(nil).RuleExtensionDaoTransactions), db)
}

// HTTPRuleDao mocks base method
func (m *MockManager) HTTPRuleDao() dao.HTTPRuleDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRuleDao")
	ret0, _ := ret[0].(dao.HTTPRuleDao)
	return ret0
}

// HTTPRuleDao indicates an expected call of HTTPRuleDao
func (mr *MockManagerMockRecorder) HTTPRuleDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRuleDao", reflect.TypeOf((*MockManager)(nil).HTTPRuleDao))
}

// HTTPRuleDaoTransactions mocks base method
func (m *MockManager) HTTPRuleDaoTransactions(db *gorm.DB) dao.HTTPRuleDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRuleDaoTransactions", db)
	ret0, _ := ret[0].(dao.HTTPRuleDao)
	return ret0
}

// HTTPRuleDaoTransactions indicates an expected call of HTTPRuleDaoTransactions
func (mr *MockManagerMockRecorder) HTTPRuleDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRuleDaoTransactions", reflect.TypeOf((*MockManager)(nil).HTTPRuleDaoTransactions), db)
}

// TCPRuleDao mocks base method
func (m *MockManager) TCPRuleDao() dao.TCPRuleDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPRuleDao")
	ret0, _ := ret[0].(dao.TCPRuleDao)
	return ret0
}

// TCPRuleDao indicates an expected call of TCPRuleDao
func (mr *MockManagerMockRecorder) TCPRuleDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPRuleDao", reflect.TypeOf((*MockManager)(nil).TCPRuleDao))
}

// TCPRuleDaoTransactions mocks base method
func (m *MockManager) TCPRuleDaoTransactions(db *gorm.DB) dao.TCPRuleDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TCPRuleDaoTransactions", db)
	ret0, _ := ret[0].(dao.TCPRuleDao)
	return ret0
}

// TCPRuleDaoTransactions indicates an expected call of TCPRuleDaoTransactions
func (mr *MockManagerMockRecorder) TCPRuleDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TCPRuleDaoTransactions", reflect.TypeOf((*MockManager)(nil).TCPRuleDaoTransactions), db)
}

// GwRuleConfigDao mocks base method
func (m *MockManager) GwRuleConfigDao() dao.GwRuleConfigDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GwRuleConfigDao")
	ret0, _ := ret[0].(dao.GwRuleConfigDao)
	return ret0
}

// GwRuleConfigDao indicates an expected call of GwRuleConfigDao
func (mr *MockManagerMockRecorder) GwRuleConfigDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GwRuleConfigDao", reflect.TypeOf((*MockManager)(nil).GwRuleConfigDao))
}

// GwRuleConfigDaoTransactions mocks base method
func (m *MockManager) GwRuleConfigDaoTransactions(db *gorm.DB) dao.GwRuleConfigDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GwRuleConfigDaoTransactions", db)
	ret0, _ := ret[0].(dao.GwRuleConfigDao)
	return ret0
}

// GwRuleConfigDaoTransactions indicates an expected call of GwRuleConfigDaoTransactions
func (mr *MockManagerMockRecorder) GwRuleConfigDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GwRuleConfigDaoTransactions", reflect.TypeOf((*MockManager)(nil).GwRuleConfigDaoTransactions), db)
}

// EndpointsDao mocks base method
func (m *MockManager) EndpointsDao() dao.EndpointsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsDao")
	ret0, _ := ret[0].(dao.EndpointsDao)
	return ret0
}

// EndpointsDao indicates an expected call of EndpointsDao
func (mr *MockManagerMockRecorder) EndpointsDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsDao", reflect.TypeOf((*MockManager)(nil).EndpointsDao))
}

// EndpointsDaoTransactions mocks base method
func (m *MockManager) EndpointsDaoTransactions(db *gorm.DB) dao.EndpointsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndpointsDaoTransactions", db)
	ret0, _ := ret[0].(dao.EndpointsDao)
	return ret0
}

// EndpointsDaoTransactions indicates an expected call of EndpointsDaoTransactions
func (mr *MockManagerMockRecorder) EndpointsDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndpointsDaoTransactions", reflect.TypeOf((*MockManager)(nil).EndpointsDaoTransactions), db)
}

// ThirdPartySvcDiscoveryCfgDao mocks base method
func (m *MockManager) ThirdPartySvcDiscoveryCfgDao() dao.ThirdPartySvcDiscoveryCfgDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThirdPartySvcDiscoveryCfgDao")
	ret0, _ := ret[0].(dao.ThirdPartySvcDiscoveryCfgDao)
	return ret0
}

// ThirdPartySvcDiscoveryCfgDao indicates an expected call of ThirdPartySvcDiscoveryCfgDao
func (mr *MockManagerMockRecorder) ThirdPartySvcDiscoveryCfgDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThirdPartySvcDiscoveryCfgDao", reflect.TypeOf((*MockManager)(nil).ThirdPartySvcDiscoveryCfgDao))
}

// ThirdPartySvcDiscoveryCfgDaoTransactions mocks base method
func (m *MockManager) ThirdPartySvcDiscoveryCfgDaoTransactions(db *gorm.DB) dao.ThirdPartySvcDiscoveryCfgDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ThirdPartySvcDiscoveryCfgDaoTransactions", db)
	ret0, _ := ret[0].(dao.ThirdPartySvcDiscoveryCfgDao)
	return ret0
}

// ThirdPartySvcDiscoveryCfgDaoTransactions indicates an expected call of ThirdPartySvcDiscoveryCfgDaoTransactions
func (mr *MockManagerMockRecorder) ThirdPartySvcDiscoveryCfgDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ThirdPartySvcDiscoveryCfgDaoTransactions", reflect.TypeOf((*MockManager)(nil).ThirdPartySvcDiscoveryCfgDaoTransactions), db)
}

// TenantEnvServceAutoscalerRulesDao mocks base method
func (m *MockManager) TenantEnvServceAutoscalerRulesDao() dao.TenantEnvServceAutoscalerRulesDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServceAutoscalerRulesDao")
	ret0, _ := ret[0].(dao.TenantEnvServceAutoscalerRulesDao)
	return ret0
}

// TenantEnvServceAutoscalerRulesDao indicates an expected call of TenantEnvServceAutoscalerRulesDao
func (mr *MockManagerMockRecorder) TenantEnvServceAutoscalerRulesDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServceAutoscalerRulesDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServceAutoscalerRulesDao))
}

// TenantEnvServceAutoscalerRulesDaoTransactions mocks base method
func (m *MockManager) TenantEnvServceAutoscalerRulesDaoTransactions(db *gorm.DB) dao.TenantEnvServceAutoscalerRulesDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServceAutoscalerRulesDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServceAutoscalerRulesDao)
	return ret0
}

// TenantEnvServceAutoscalerRulesDaoTransactions indicates an expected call of TenantEnvServceAutoscalerRulesDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServceAutoscalerRulesDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServceAutoscalerRulesDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServceAutoscalerRulesDaoTransactions), db)
}

// TenantEnvServceAutoscalerRuleMetricsDao mocks base method
func (m *MockManager) TenantEnvServceAutoscalerRuleMetricsDao() dao.TenantEnvServceAutoscalerRuleMetricsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServceAutoscalerRuleMetricsDao")
	ret0, _ := ret[0].(dao.TenantEnvServceAutoscalerRuleMetricsDao)
	return ret0
}

// TenantEnvServceAutoscalerRuleMetricsDao indicates an expected call of TenantEnvServceAutoscalerRuleMetricsDao
func (mr *MockManagerMockRecorder) TenantEnvServceAutoscalerRuleMetricsDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServceAutoscalerRuleMetricsDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServceAutoscalerRuleMetricsDao))
}

// TenantEnvServceAutoscalerRuleMetricsDaoTransactions mocks base method
func (m *MockManager) TenantEnvServceAutoscalerRuleMetricsDaoTransactions(db *gorm.DB) dao.TenantEnvServceAutoscalerRuleMetricsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServceAutoscalerRuleMetricsDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServceAutoscalerRuleMetricsDao)
	return ret0
}

// TenantEnvServceAutoscalerRuleMetricsDaoTransactions indicates an expected call of TenantEnvServceAutoscalerRuleMetricsDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServceAutoscalerRuleMetricsDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServceAutoscalerRuleMetricsDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServceAutoscalerRuleMetricsDaoTransactions), db)
}

// TenantEnvServiceScalingRecordsDao mocks base method
func (m *MockManager) TenantEnvServiceScalingRecordsDao() dao.TenantEnvServiceScalingRecordsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceScalingRecordsDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceScalingRecordsDao)
	return ret0
}

// TenantEnvServiceScalingRecordsDao indicates an expected call of TenantEnvServiceScalingRecordsDao
func (mr *MockManagerMockRecorder) TenantEnvServiceScalingRecordsDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceScalingRecordsDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceScalingRecordsDao))
}

// TenantEnvServiceScalingRecordsDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceScalingRecordsDaoTransactions(db *gorm.DB) dao.TenantEnvServiceScalingRecordsDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceScalingRecordsDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceScalingRecordsDao)
	return ret0
}

// TenantEnvServiceScalingRecordsDaoTransactions indicates an expected call of TenantEnvServiceScalingRecordsDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceScalingRecordsDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceScalingRecordsDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceScalingRecordsDaoTransactions), db)
}

// TenantEnvServiceMonitorDao mocks base method
func (m *MockManager) TenantEnvServiceMonitorDao() dao.TenantEnvServiceMonitorDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceMonitorDao")
	ret0, _ := ret[0].(dao.TenantEnvServiceMonitorDao)
	return ret0
}

// TenantEnvServiceMonitorDao indicates an expected call of TenantEnvServiceMonitorDao
func (mr *MockManagerMockRecorder) TenantEnvServiceMonitorDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceMonitorDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceMonitorDao))
}

// TenantEnvServiceMonitorDaoTransactions mocks base method
func (m *MockManager) TenantEnvServiceMonitorDaoTransactions(db *gorm.DB) dao.TenantEnvServiceMonitorDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TenantEnvServiceMonitorDaoTransactions", db)
	ret0, _ := ret[0].(dao.TenantEnvServiceMonitorDao)
	return ret0
}

// TenantEnvServiceMonitorDaoTransactions indicates an expected call of TenantEnvServiceMonitorDaoTransactions
func (mr *MockManagerMockRecorder) TenantEnvServiceMonitorDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceMonitorDaoTransactions", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceMonitorDaoTransactions), db)
}

// TenantEnvServiceMonitorDao mocks base method
func (m *MockManager) HTTPRuleRewriteDao() dao.HTTPRuleRewriteDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRuleRewriteDao")
	ret0, _ := ret[0].(dao.HTTPRuleRewriteDao)
	return ret0
}

// HTTPRuleRewriteDao indicates an expected call of HTTPRuleRewriteDao
func  (mr *MockManagerMockRecorder) HTTPRuleRewriteDao() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TenantEnvServiceMonitorDao", reflect.TypeOf((*MockManager)(nil).TenantEnvServiceMonitorDao))
}

// HTTPRuleRewriteDaoTransactions mocks base method
func (m *MockManager) HTTPRuleRewriteDaoTransactions(db *gorm.DB) dao.HTTPRuleRewriteDao {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPRuleRewriteDaoTransactions", db)
	ret0, _ := ret[0].(dao.HTTPRuleRewriteDao)
	return ret0
}

// HTTPRuleRewriteDaoTransactions indicates an expected call of HTTPRuleRewriteDaoTransactions
func (mr *MockManagerMockRecorder) HTTPRuleRewriteDaoTransactions(db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPRuleRewriteDaoTransactions", reflect.TypeOf((*MockManager)(nil).HTTPRuleRewriteDaoTransactions), db)
}